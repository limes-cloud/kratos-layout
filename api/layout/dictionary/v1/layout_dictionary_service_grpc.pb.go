// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/layout/dictionary/layout_dictionary_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dictionary_GetDictionary_FullMethodName    = "/layout.api.layout.dictionary.v1.Dictionary/GetDictionary"
	Dictionary_ListDictionary_FullMethodName   = "/layout.api.layout.dictionary.v1.Dictionary/ListDictionary"
	Dictionary_CreateDictionary_FullMethodName = "/layout.api.layout.dictionary.v1.Dictionary/CreateDictionary"
	Dictionary_UpdateDictionary_FullMethodName = "/layout.api.layout.dictionary.v1.Dictionary/UpdateDictionary"
	Dictionary_DeleteDictionary_FullMethodName = "/layout.api.layout.dictionary.v1.Dictionary/DeleteDictionary"
)

// DictionaryClient is the client API for Dictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionaryClient interface {
	// GetDictionary 获取指定的字典目录
	GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryReply, error)
	// ListDictionary 获取字典目录列表
	ListDictionary(ctx context.Context, in *ListDictionaryRequest, opts ...grpc.CallOption) (*ListDictionaryReply, error)
	// CreateDictionary 创建字典目录
	CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryReply, error)
	// UpdateDictionary 更新字典目录
	UpdateDictionary(ctx context.Context, in *UpdateDictionaryRequest, opts ...grpc.CallOption) (*UpdateDictionaryReply, error)
	// DeleteDictionary 删除字典目录
	DeleteDictionary(ctx context.Context, in *DeleteDictionaryRequest, opts ...grpc.CallOption) (*DeleteDictionaryReply, error)
}

type dictionaryClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryClient(cc grpc.ClientConnInterface) DictionaryClient {
	return &dictionaryClient{cc}
}

func (c *dictionaryClient) GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryReply, error) {
	out := new(GetDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_GetDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) ListDictionary(ctx context.Context, in *ListDictionaryRequest, opts ...grpc.CallOption) (*ListDictionaryReply, error) {
	out := new(ListDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_ListDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryReply, error) {
	out := new(CreateDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_CreateDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) UpdateDictionary(ctx context.Context, in *UpdateDictionaryRequest, opts ...grpc.CallOption) (*UpdateDictionaryReply, error) {
	out := new(UpdateDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_UpdateDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) DeleteDictionary(ctx context.Context, in *DeleteDictionaryRequest, opts ...grpc.CallOption) (*DeleteDictionaryReply, error) {
	out := new(DeleteDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_DeleteDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServer is the server API for Dictionary service.
// All implementations must embed UnimplementedDictionaryServer
// for forward compatibility
type DictionaryServer interface {
	// GetDictionary 获取指定的字典目录
	GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryReply, error)
	// ListDictionary 获取字典目录列表
	ListDictionary(context.Context, *ListDictionaryRequest) (*ListDictionaryReply, error)
	// CreateDictionary 创建字典目录
	CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryReply, error)
	// UpdateDictionary 更新字典目录
	UpdateDictionary(context.Context, *UpdateDictionaryRequest) (*UpdateDictionaryReply, error)
	// DeleteDictionary 删除字典目录
	DeleteDictionary(context.Context, *DeleteDictionaryRequest) (*DeleteDictionaryReply, error)
	mustEmbedUnimplementedDictionaryServer()
}

// UnimplementedDictionaryServer must be embedded to have forward compatible implementations.
type UnimplementedDictionaryServer struct {
}

func (UnimplementedDictionaryServer) GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionary not implemented")
}
func (UnimplementedDictionaryServer) ListDictionary(context.Context, *ListDictionaryRequest) (*ListDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictionary not implemented")
}
func (UnimplementedDictionaryServer) CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionary not implemented")
}
func (UnimplementedDictionaryServer) UpdateDictionary(context.Context, *UpdateDictionaryRequest) (*UpdateDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionary not implemented")
}
func (UnimplementedDictionaryServer) DeleteDictionary(context.Context, *DeleteDictionaryRequest) (*DeleteDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionary not implemented")
}
func (UnimplementedDictionaryServer) mustEmbedUnimplementedDictionaryServer() {}

// UnsafeDictionaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServer will
// result in compilation errors.
type UnsafeDictionaryServer interface {
	mustEmbedUnimplementedDictionaryServer()
}

func RegisterDictionaryServer(s grpc.ServiceRegistrar, srv DictionaryServer) {
	s.RegisterService(&Dictionary_ServiceDesc, srv)
}

func _Dictionary_GetDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).GetDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_GetDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).GetDictionary(ctx, req.(*GetDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_ListDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).ListDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_ListDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).ListDictionary(ctx, req.(*ListDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_CreateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).CreateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_CreateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).CreateDictionary(ctx, req.(*CreateDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_UpdateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).UpdateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_UpdateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).UpdateDictionary(ctx, req.(*UpdateDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_DeleteDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).DeleteDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_DeleteDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).DeleteDictionary(ctx, req.(*DeleteDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dictionary_ServiceDesc is the grpc.ServiceDesc for Dictionary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dictionary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "layout.api.layout.dictionary.v1.Dictionary",
	HandlerType: (*DictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDictionary",
			Handler:    _Dictionary_GetDictionary_Handler,
		},
		{
			MethodName: "ListDictionary",
			Handler:    _Dictionary_ListDictionary_Handler,
		},
		{
			MethodName: "CreateDictionary",
			Handler:    _Dictionary_CreateDictionary_Handler,
		},
		{
			MethodName: "UpdateDictionary",
			Handler:    _Dictionary_UpdateDictionary_Handler,
		},
		{
			MethodName: "DeleteDictionary",
			Handler:    _Dictionary_DeleteDictionary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/layout/dictionary/layout_dictionary_service.proto",
}
