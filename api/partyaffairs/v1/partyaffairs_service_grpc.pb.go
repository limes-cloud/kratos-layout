// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/partyaffairs/partyaffairs_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PartyAffairs_PageNoticeUser_FullMethodName         = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNoticeUser"
	PartyAffairs_PageNotice_FullMethodName             = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNotice"
	PartyAffairs_GetNotice_FullMethodName              = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetNotice"
	PartyAffairs_ReadNotice_FullMethodName             = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/ReadNotice"
	PartyAffairs_AddNotice_FullMethodName              = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNotice"
	PartyAffairs_UpdateNotice_FullMethodName           = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateNotice"
	PartyAffairs_DeleteNotice_FullMethodName           = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNotice"
	PartyAffairs_AllNewsClassify_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AllNewsClassify"
	PartyAffairs_AddNewsClassify_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNewsClassify"
	PartyAffairs_UpdateNewsClassify_FullMethodName     = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateNewsClassify"
	PartyAffairs_DeleteNewsClassify_FullMethodName     = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNewsClassify"
	PartyAffairs_PageNewsContent_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNewsContent"
	PartyAffairs_GetNewsContent_FullMethodName         = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetNewsContent"
	PartyAffairs_AddNewsContent_FullMethodName         = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNewsContent"
	PartyAffairs_UpdateNewsContent_FullMethodName      = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateNewsContent"
	PartyAffairs_DeleteNewsContent_FullMethodName      = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNewsContent"
	PartyAffairs_PageNewsComment_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNewsComment"
	PartyAffairs_DeleteNewsComment_FullMethodName      = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNewsComment"
	PartyAffairs_AddNewsComment_FullMethodName         = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNewsComment"
	PartyAffairs_DeleteCurNewsComment_FullMethodName   = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteCurNewsComment"
	PartyAffairs_AllResourceClassify_FullMethodName    = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AllResourceClassify"
	PartyAffairs_AddResourceClassify_FullMethodName    = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddResourceClassify"
	PartyAffairs_UpdateResourceClassify_FullMethodName = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateResourceClassify"
	PartyAffairs_DeleteResourceClassify_FullMethodName = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteResourceClassify"
	PartyAffairs_PageResourceContent_FullMethodName    = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageResourceContent"
	PartyAffairs_GetResourceContent_FullMethodName     = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetResourceContent"
	PartyAffairs_AddResourceContent_FullMethodName     = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddResourceContent"
	PartyAffairs_UpdateResourceContent_FullMethodName  = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateResourceContent"
	PartyAffairs_DeleteResourceContent_FullMethodName  = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteResourceContent"
	PartyAffairs_AllBanner_FullMethodName              = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AllBanner"
	PartyAffairs_AddBanner_FullMethodName              = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddBanner"
	PartyAffairs_UpdateBanner_FullMethodName           = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateBanner"
	PartyAffairs_DeleteBanner_FullMethodName           = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteBanner"
	PartyAffairs_PageTask_FullMethodName               = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageTask"
	PartyAffairs_GetTask_FullMethodName                = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetTask"
	PartyAffairs_AddTask_FullMethodName                = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddTask"
	PartyAffairs_UpdateTask_FullMethodName             = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateTask"
	PartyAffairs_DeleteTask_FullMethodName             = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteTask"
	PartyAffairs_PageTaskValue_FullMethodName          = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageTaskValue"
	PartyAffairs_GetTaskValue_FullMethodName           = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetTaskValue"
	PartyAffairs_ExportTaskValue_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/ExportTaskValue"
	PartyAffairs_GetCurTaskValue_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetCurTaskValue"
	PartyAffairs_AddTaskValue_FullMethodName           = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddTaskValue"
	PartyAffairs_UpdateTaskValue_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateTaskValue"
	PartyAffairs_DeleteTaskValue_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteTaskValue"
	PartyAffairs_PageVideoClassify_FullMethodName      = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageVideoClassify"
	PartyAffairs_AddVideoClassify_FullMethodName       = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddVideoClassify"
	PartyAffairs_UpdateVideoClassify_FullMethodName    = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateVideoClassify"
	PartyAffairs_DeleteVideoClassify_FullMethodName    = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteVideoClassify"
	PartyAffairs_PageVideoContent_FullMethodName       = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageVideoContent"
	PartyAffairs_GetVideoContent_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetVideoContent"
	PartyAffairs_AddVideoContent_FullMethodName        = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddVideoContent"
	PartyAffairs_UpdateVideoContent_FullMethodName     = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateVideoContent"
	PartyAffairs_DeleteVideoContent_FullMethodName     = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteVideoContent"
	PartyAffairs_UpdateUserVideoProcess_FullMethodName = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateUserVideoProcess"
)

// PartyAffairsClient is the client API for PartyAffairs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyAffairsClient interface {
	PageNoticeUser(ctx context.Context, in *PageNoticeUserRequest, opts ...grpc.CallOption) (*PageNoticeUserReply, error)
	PageNotice(ctx context.Context, in *PageNoticeRequest, opts ...grpc.CallOption) (*PageNoticeReply, error)
	GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*Notice, error)
	ReadNotice(ctx context.Context, in *ReadNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNewsClassifyReply, error)
	AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageNewsContent(ctx context.Context, in *PageNewsContentRequest, opts ...grpc.CallOption) (*PageNewsContentReply, error)
	GetNewsContent(ctx context.Context, in *GetNewsContentRequest, opts ...grpc.CallOption) (*NewsContent, error)
	AddNewsContent(ctx context.Context, in *AddNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateNewsContent(ctx context.Context, in *UpdateNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNewsContent(ctx context.Context, in *DeleteNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageNewsComment(ctx context.Context, in *PageNewsCommentRequest, opts ...grpc.CallOption) (*PageNewsCommentReply, error)
	DeleteNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddNewsComment(ctx context.Context, in *AddNewsCommentRequest, opts ...grpc.CallOption) (*AddNewsCommentReply, error)
	DeleteCurNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllResourceClassifyReply, error)
	AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageResourceContent(ctx context.Context, in *PageResourceContentRequest, opts ...grpc.CallOption) (*PageResourceContentReply, error)
	GetResourceContent(ctx context.Context, in *GetResourceContentRequest, opts ...grpc.CallOption) (*ResourceContent, error)
	AddResourceContent(ctx context.Context, in *AddResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResourceContent(ctx context.Context, in *UpdateResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResourceContent(ctx context.Context, in *DeleteResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBannerReply, error)
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageTask(ctx context.Context, in *PageTaskRequest, opts ...grpc.CallOption) (*PageTaskReply, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...grpc.CallOption) (*PageTaskValueReply, error)
	GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error)
	ExportTaskValue(ctx context.Context, in *ExportTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurTaskValue(ctx context.Context, in *GetCurTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error)
	AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageVideoClassify(ctx context.Context, in *PageVideoClassifyRequest, opts ...grpc.CallOption) (*PageVideoClassifyReply, error)
	AddVideoClassify(ctx context.Context, in *AddVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVideoClassify(ctx context.Context, in *UpdateVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVideoClassify(ctx context.Context, in *DeleteVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageVideoContent(ctx context.Context, in *PageVideoContentRequest, opts ...grpc.CallOption) (*PageVideoContentReply, error)
	GetVideoContent(ctx context.Context, in *GetVideoContentRequest, opts ...grpc.CallOption) (*VideoContent, error)
	AddVideoContent(ctx context.Context, in *AddVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateVideoContent(ctx context.Context, in *UpdateVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVideoContent(ctx context.Context, in *DeleteVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateUserVideoProcess(ctx context.Context, in *UpdateUserVideoProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type partyAffairsClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyAffairsClient(cc grpc.ClientConnInterface) PartyAffairsClient {
	return &partyAffairsClient{cc}
}

func (c *partyAffairsClient) PageNoticeUser(ctx context.Context, in *PageNoticeUserRequest, opts ...grpc.CallOption) (*PageNoticeUserReply, error) {
	out := new(PageNoticeUserReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageNoticeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageNotice(ctx context.Context, in *PageNoticeRequest, opts ...grpc.CallOption) (*PageNoticeReply, error) {
	out := new(PageNoticeReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*Notice, error) {
	out := new(Notice)
	err := c.cc.Invoke(ctx, PartyAffairs_GetNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) ReadNotice(ctx context.Context, in *ReadNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_ReadNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllNewsClassifyReply, error) {
	out := new(AllNewsClassifyReply)
	err := c.cc.Invoke(ctx, PartyAffairs_AllNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteNewsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageNewsContent(ctx context.Context, in *PageNewsContentRequest, opts ...grpc.CallOption) (*PageNewsContentReply, error) {
	out := new(PageNewsContentReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) GetNewsContent(ctx context.Context, in *GetNewsContentRequest, opts ...grpc.CallOption) (*NewsContent, error) {
	out := new(NewsContent)
	err := c.cc.Invoke(ctx, PartyAffairs_GetNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddNewsContent(ctx context.Context, in *AddNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateNewsContent(ctx context.Context, in *UpdateNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteNewsContent(ctx context.Context, in *DeleteNewsContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteNewsContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageNewsComment(ctx context.Context, in *PageNewsCommentRequest, opts ...grpc.CallOption) (*PageNewsCommentReply, error) {
	out := new(PageNewsCommentReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddNewsComment(ctx context.Context, in *AddNewsCommentRequest, opts ...grpc.CallOption) (*AddNewsCommentReply, error) {
	out := new(AddNewsCommentReply)
	err := c.cc.Invoke(ctx, PartyAffairs_AddNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteCurNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteCurNewsComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllResourceClassifyReply, error) {
	out := new(AllResourceClassifyReply)
	err := c.cc.Invoke(ctx, PartyAffairs_AllResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteResourceClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageResourceContent(ctx context.Context, in *PageResourceContentRequest, opts ...grpc.CallOption) (*PageResourceContentReply, error) {
	out := new(PageResourceContentReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) GetResourceContent(ctx context.Context, in *GetResourceContentRequest, opts ...grpc.CallOption) (*ResourceContent, error) {
	out := new(ResourceContent)
	err := c.cc.Invoke(ctx, PartyAffairs_GetResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddResourceContent(ctx context.Context, in *AddResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateResourceContent(ctx context.Context, in *UpdateResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteResourceContent(ctx context.Context, in *DeleteResourceContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteResourceContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AllBanner(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllBannerReply, error) {
	out := new(AllBannerReply)
	err := c.cc.Invoke(ctx, PartyAffairs_AllBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageTask(ctx context.Context, in *PageTaskRequest, opts ...grpc.CallOption) (*PageTaskReply, error) {
	out := new(PageTaskReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, PartyAffairs_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...grpc.CallOption) (*PageTaskValueReply, error) {
	out := new(PageTaskValueReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error) {
	out := new(TaskValue)
	err := c.cc.Invoke(ctx, PartyAffairs_GetTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) ExportTaskValue(ctx context.Context, in *ExportTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_ExportTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) GetCurTaskValue(ctx context.Context, in *GetCurTaskValueRequest, opts ...grpc.CallOption) (*TaskValue, error) {
	out := new(TaskValue)
	err := c.cc.Invoke(ctx, PartyAffairs_GetCurTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageVideoClassify(ctx context.Context, in *PageVideoClassifyRequest, opts ...grpc.CallOption) (*PageVideoClassifyReply, error) {
	out := new(PageVideoClassifyReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddVideoClassify(ctx context.Context, in *AddVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateVideoClassify(ctx context.Context, in *UpdateVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteVideoClassify(ctx context.Context, in *DeleteVideoClassifyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteVideoClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) PageVideoContent(ctx context.Context, in *PageVideoContentRequest, opts ...grpc.CallOption) (*PageVideoContentReply, error) {
	out := new(PageVideoContentReply)
	err := c.cc.Invoke(ctx, PartyAffairs_PageVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) GetVideoContent(ctx context.Context, in *GetVideoContentRequest, opts ...grpc.CallOption) (*VideoContent, error) {
	out := new(VideoContent)
	err := c.cc.Invoke(ctx, PartyAffairs_GetVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) AddVideoContent(ctx context.Context, in *AddVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_AddVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateVideoContent(ctx context.Context, in *UpdateVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) DeleteVideoContent(ctx context.Context, in *DeleteVideoContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_DeleteVideoContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyAffairsClient) UpdateUserVideoProcess(ctx context.Context, in *UpdateUserVideoProcessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartyAffairs_UpdateUserVideoProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyAffairsServer is the server API for PartyAffairs service.
// All implementations must embed UnimplementedPartyAffairsServer
// for forward compatibility
type PartyAffairsServer interface {
	PageNoticeUser(context.Context, *PageNoticeUserRequest) (*PageNoticeUserReply, error)
	PageNotice(context.Context, *PageNoticeRequest) (*PageNoticeReply, error)
	GetNotice(context.Context, *GetNoticeRequest) (*Notice, error)
	ReadNotice(context.Context, *ReadNoticeRequest) (*emptypb.Empty, error)
	AddNotice(context.Context, *AddNoticeRequest) (*emptypb.Empty, error)
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error)
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error)
	AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error)
	AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error)
	UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error)
	DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error)
	PageNewsContent(context.Context, *PageNewsContentRequest) (*PageNewsContentReply, error)
	GetNewsContent(context.Context, *GetNewsContentRequest) (*NewsContent, error)
	AddNewsContent(context.Context, *AddNewsContentRequest) (*emptypb.Empty, error)
	UpdateNewsContent(context.Context, *UpdateNewsContentRequest) (*emptypb.Empty, error)
	DeleteNewsContent(context.Context, *DeleteNewsContentRequest) (*emptypb.Empty, error)
	PageNewsComment(context.Context, *PageNewsCommentRequest) (*PageNewsCommentReply, error)
	DeleteNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error)
	AddNewsComment(context.Context, *AddNewsCommentRequest) (*AddNewsCommentReply, error)
	DeleteCurNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error)
	AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error)
	AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error)
	UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error)
	DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error)
	PageResourceContent(context.Context, *PageResourceContentRequest) (*PageResourceContentReply, error)
	GetResourceContent(context.Context, *GetResourceContentRequest) (*ResourceContent, error)
	AddResourceContent(context.Context, *AddResourceContentRequest) (*emptypb.Empty, error)
	UpdateResourceContent(context.Context, *UpdateResourceContentRequest) (*emptypb.Empty, error)
	DeleteResourceContent(context.Context, *DeleteResourceContentRequest) (*emptypb.Empty, error)
	AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error)
	AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error)
	PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error)
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error)
	GetTaskValue(context.Context, *GetTaskValueRequest) (*TaskValue, error)
	ExportTaskValue(context.Context, *ExportTaskValueRequest) (*emptypb.Empty, error)
	GetCurTaskValue(context.Context, *GetCurTaskValueRequest) (*TaskValue, error)
	AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error)
	UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error)
	DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error)
	PageVideoClassify(context.Context, *PageVideoClassifyRequest) (*PageVideoClassifyReply, error)
	AddVideoClassify(context.Context, *AddVideoClassifyRequest) (*emptypb.Empty, error)
	UpdateVideoClassify(context.Context, *UpdateVideoClassifyRequest) (*emptypb.Empty, error)
	DeleteVideoClassify(context.Context, *DeleteVideoClassifyRequest) (*emptypb.Empty, error)
	PageVideoContent(context.Context, *PageVideoContentRequest) (*PageVideoContentReply, error)
	GetVideoContent(context.Context, *GetVideoContentRequest) (*VideoContent, error)
	AddVideoContent(context.Context, *AddVideoContentRequest) (*emptypb.Empty, error)
	UpdateVideoContent(context.Context, *UpdateVideoContentRequest) (*emptypb.Empty, error)
	DeleteVideoContent(context.Context, *DeleteVideoContentRequest) (*emptypb.Empty, error)
	UpdateUserVideoProcess(context.Context, *UpdateUserVideoProcessRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPartyAffairsServer()
}

// UnimplementedPartyAffairsServer must be embedded to have forward compatible implementations.
type UnimplementedPartyAffairsServer struct {
}

func (UnimplementedPartyAffairsServer) PageNoticeUser(context.Context, *PageNoticeUserRequest) (*PageNoticeUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNoticeUser not implemented")
}
func (UnimplementedPartyAffairsServer) PageNotice(context.Context, *PageNoticeRequest) (*PageNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNotice not implemented")
}
func (UnimplementedPartyAffairsServer) GetNotice(context.Context, *GetNoticeRequest) (*Notice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (UnimplementedPartyAffairsServer) ReadNotice(context.Context, *ReadNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNotice not implemented")
}
func (UnimplementedPartyAffairsServer) AddNotice(context.Context, *AddNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotice not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedPartyAffairsServer) AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllNewsClassify not implemented")
}
func (UnimplementedPartyAffairsServer) AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsClassify not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewsClassify not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsClassify not implemented")
}
func (UnimplementedPartyAffairsServer) PageNewsContent(context.Context, *PageNewsContentRequest) (*PageNewsContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNewsContent not implemented")
}
func (UnimplementedPartyAffairsServer) GetNewsContent(context.Context, *GetNewsContentRequest) (*NewsContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsContent not implemented")
}
func (UnimplementedPartyAffairsServer) AddNewsContent(context.Context, *AddNewsContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsContent not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateNewsContent(context.Context, *UpdateNewsContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNewsContent not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteNewsContent(context.Context, *DeleteNewsContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsContent not implemented")
}
func (UnimplementedPartyAffairsServer) PageNewsComment(context.Context, *PageNewsCommentRequest) (*PageNewsCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNewsComment not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsComment not implemented")
}
func (UnimplementedPartyAffairsServer) AddNewsComment(context.Context, *AddNewsCommentRequest) (*AddNewsCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsComment not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteCurNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurNewsComment not implemented")
}
func (UnimplementedPartyAffairsServer) AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllResourceClassify not implemented")
}
func (UnimplementedPartyAffairsServer) AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceClassify not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceClassify not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceClassify not implemented")
}
func (UnimplementedPartyAffairsServer) PageResourceContent(context.Context, *PageResourceContentRequest) (*PageResourceContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageResourceContent not implemented")
}
func (UnimplementedPartyAffairsServer) GetResourceContent(context.Context, *GetResourceContentRequest) (*ResourceContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceContent not implemented")
}
func (UnimplementedPartyAffairsServer) AddResourceContent(context.Context, *AddResourceContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceContent not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateResourceContent(context.Context, *UpdateResourceContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceContent not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteResourceContent(context.Context, *DeleteResourceContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceContent not implemented")
}
func (UnimplementedPartyAffairsServer) AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBanner not implemented")
}
func (UnimplementedPartyAffairsServer) AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}
func (UnimplementedPartyAffairsServer) PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTask not implemented")
}
func (UnimplementedPartyAffairsServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedPartyAffairsServer) AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedPartyAffairsServer) PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTaskValue not implemented")
}
func (UnimplementedPartyAffairsServer) GetTaskValue(context.Context, *GetTaskValueRequest) (*TaskValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskValue not implemented")
}
func (UnimplementedPartyAffairsServer) ExportTaskValue(context.Context, *ExportTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTaskValue not implemented")
}
func (UnimplementedPartyAffairsServer) GetCurTaskValue(context.Context, *GetCurTaskValueRequest) (*TaskValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurTaskValue not implemented")
}
func (UnimplementedPartyAffairsServer) AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTaskValue not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskValue not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskValue not implemented")
}
func (UnimplementedPartyAffairsServer) PageVideoClassify(context.Context, *PageVideoClassifyRequest) (*PageVideoClassifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageVideoClassify not implemented")
}
func (UnimplementedPartyAffairsServer) AddVideoClassify(context.Context, *AddVideoClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoClassify not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateVideoClassify(context.Context, *UpdateVideoClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoClassify not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteVideoClassify(context.Context, *DeleteVideoClassifyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoClassify not implemented")
}
func (UnimplementedPartyAffairsServer) PageVideoContent(context.Context, *PageVideoContentRequest) (*PageVideoContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageVideoContent not implemented")
}
func (UnimplementedPartyAffairsServer) GetVideoContent(context.Context, *GetVideoContentRequest) (*VideoContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoContent not implemented")
}
func (UnimplementedPartyAffairsServer) AddVideoContent(context.Context, *AddVideoContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoContent not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateVideoContent(context.Context, *UpdateVideoContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoContent not implemented")
}
func (UnimplementedPartyAffairsServer) DeleteVideoContent(context.Context, *DeleteVideoContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoContent not implemented")
}
func (UnimplementedPartyAffairsServer) UpdateUserVideoProcess(context.Context, *UpdateUserVideoProcessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserVideoProcess not implemented")
}
func (UnimplementedPartyAffairsServer) mustEmbedUnimplementedPartyAffairsServer() {}

// UnsafePartyAffairsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyAffairsServer will
// result in compilation errors.
type UnsafePartyAffairsServer interface {
	mustEmbedUnimplementedPartyAffairsServer()
}

func RegisterPartyAffairsServer(s grpc.ServiceRegistrar, srv PartyAffairsServer) {
	s.RegisterService(&PartyAffairs_ServiceDesc, srv)
}

func _PartyAffairs_PageNoticeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNoticeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageNoticeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageNoticeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageNoticeUser(ctx, req.(*PageNoticeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageNotice(ctx, req.(*PageNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_GetNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).GetNotice(ctx, req.(*GetNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_ReadNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).ReadNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_ReadNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).ReadNotice(ctx, req.(*ReadNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddNotice(ctx, req.(*AddNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteNotice(ctx, req.(*DeleteNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AllNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AllNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AllNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AllNewsClassify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddNewsClassify(ctx, req.(*AddNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateNewsClassify(ctx, req.(*UpdateNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteNewsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteNewsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteNewsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteNewsClassify(ctx, req.(*DeleteNewsClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageNewsContent(ctx, req.(*PageNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_GetNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).GetNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_GetNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).GetNewsContent(ctx, req.(*GetNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddNewsContent(ctx, req.(*AddNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateNewsContent(ctx, req.(*UpdateNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteNewsContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteNewsContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteNewsContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteNewsContent(ctx, req.(*DeleteNewsContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageNewsComment(ctx, req.(*PageNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteNewsComment(ctx, req.(*DeleteNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddNewsComment(ctx, req.(*AddNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteCurNewsComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteCurNewsComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteCurNewsComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteCurNewsComment(ctx, req.(*DeleteNewsCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AllResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AllResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AllResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AllResourceClassify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddResourceClassify(ctx, req.(*AddResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateResourceClassify(ctx, req.(*UpdateResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteResourceClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteResourceClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteResourceClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteResourceClassify(ctx, req.(*DeleteResourceClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageResourceContent(ctx, req.(*PageResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_GetResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).GetResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_GetResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).GetResourceContent(ctx, req.(*GetResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddResourceContent(ctx, req.(*AddResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateResourceContent(ctx, req.(*UpdateResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteResourceContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteResourceContent(ctx, req.(*DeleteResourceContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AllBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AllBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AllBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AllBanner(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateBanner(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageTask(ctx, req.(*PageTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageTaskValue(ctx, req.(*PageTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_GetTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).GetTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_GetTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).GetTaskValue(ctx, req.(*GetTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_ExportTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).ExportTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_ExportTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).ExportTaskValue(ctx, req.(*ExportTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_GetCurTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).GetCurTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_GetCurTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).GetCurTaskValue(ctx, req.(*GetCurTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddTaskValue(ctx, req.(*AddTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateTaskValue(ctx, req.(*UpdateTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteTaskValue(ctx, req.(*DeleteTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageVideoClassify(ctx, req.(*PageVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddVideoClassify(ctx, req.(*AddVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateVideoClassify(ctx, req.(*UpdateVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteVideoClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoClassifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteVideoClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteVideoClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteVideoClassify(ctx, req.(*DeleteVideoClassifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_PageVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).PageVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_PageVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).PageVideoContent(ctx, req.(*PageVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_GetVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).GetVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_GetVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).GetVideoContent(ctx, req.(*GetVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_AddVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).AddVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_AddVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).AddVideoContent(ctx, req.(*AddVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateVideoContent(ctx, req.(*UpdateVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_DeleteVideoContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).DeleteVideoContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_DeleteVideoContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).DeleteVideoContent(ctx, req.(*DeleteVideoContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartyAffairs_UpdateUserVideoProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserVideoProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyAffairsServer).UpdateUserVideoProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartyAffairs_UpdateUserVideoProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyAffairsServer).UpdateUserVideoProcess(ctx, req.(*UpdateUserVideoProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartyAffairs_ServiceDesc is the grpc.ServiceDesc for PartyAffairs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyAffairs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partyaffairs.api.partyaffairs.v1.PartyAffairs",
	HandlerType: (*PartyAffairsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageNoticeUser",
			Handler:    _PartyAffairs_PageNoticeUser_Handler,
		},
		{
			MethodName: "PageNotice",
			Handler:    _PartyAffairs_PageNotice_Handler,
		},
		{
			MethodName: "GetNotice",
			Handler:    _PartyAffairs_GetNotice_Handler,
		},
		{
			MethodName: "ReadNotice",
			Handler:    _PartyAffairs_ReadNotice_Handler,
		},
		{
			MethodName: "AddNotice",
			Handler:    _PartyAffairs_AddNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _PartyAffairs_UpdateNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _PartyAffairs_DeleteNotice_Handler,
		},
		{
			MethodName: "AllNewsClassify",
			Handler:    _PartyAffairs_AllNewsClassify_Handler,
		},
		{
			MethodName: "AddNewsClassify",
			Handler:    _PartyAffairs_AddNewsClassify_Handler,
		},
		{
			MethodName: "UpdateNewsClassify",
			Handler:    _PartyAffairs_UpdateNewsClassify_Handler,
		},
		{
			MethodName: "DeleteNewsClassify",
			Handler:    _PartyAffairs_DeleteNewsClassify_Handler,
		},
		{
			MethodName: "PageNewsContent",
			Handler:    _PartyAffairs_PageNewsContent_Handler,
		},
		{
			MethodName: "GetNewsContent",
			Handler:    _PartyAffairs_GetNewsContent_Handler,
		},
		{
			MethodName: "AddNewsContent",
			Handler:    _PartyAffairs_AddNewsContent_Handler,
		},
		{
			MethodName: "UpdateNewsContent",
			Handler:    _PartyAffairs_UpdateNewsContent_Handler,
		},
		{
			MethodName: "DeleteNewsContent",
			Handler:    _PartyAffairs_DeleteNewsContent_Handler,
		},
		{
			MethodName: "PageNewsComment",
			Handler:    _PartyAffairs_PageNewsComment_Handler,
		},
		{
			MethodName: "DeleteNewsComment",
			Handler:    _PartyAffairs_DeleteNewsComment_Handler,
		},
		{
			MethodName: "AddNewsComment",
			Handler:    _PartyAffairs_AddNewsComment_Handler,
		},
		{
			MethodName: "DeleteCurNewsComment",
			Handler:    _PartyAffairs_DeleteCurNewsComment_Handler,
		},
		{
			MethodName: "AllResourceClassify",
			Handler:    _PartyAffairs_AllResourceClassify_Handler,
		},
		{
			MethodName: "AddResourceClassify",
			Handler:    _PartyAffairs_AddResourceClassify_Handler,
		},
		{
			MethodName: "UpdateResourceClassify",
			Handler:    _PartyAffairs_UpdateResourceClassify_Handler,
		},
		{
			MethodName: "DeleteResourceClassify",
			Handler:    _PartyAffairs_DeleteResourceClassify_Handler,
		},
		{
			MethodName: "PageResourceContent",
			Handler:    _PartyAffairs_PageResourceContent_Handler,
		},
		{
			MethodName: "GetResourceContent",
			Handler:    _PartyAffairs_GetResourceContent_Handler,
		},
		{
			MethodName: "AddResourceContent",
			Handler:    _PartyAffairs_AddResourceContent_Handler,
		},
		{
			MethodName: "UpdateResourceContent",
			Handler:    _PartyAffairs_UpdateResourceContent_Handler,
		},
		{
			MethodName: "DeleteResourceContent",
			Handler:    _PartyAffairs_DeleteResourceContent_Handler,
		},
		{
			MethodName: "AllBanner",
			Handler:    _PartyAffairs_AllBanner_Handler,
		},
		{
			MethodName: "AddBanner",
			Handler:    _PartyAffairs_AddBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _PartyAffairs_UpdateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _PartyAffairs_DeleteBanner_Handler,
		},
		{
			MethodName: "PageTask",
			Handler:    _PartyAffairs_PageTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _PartyAffairs_GetTask_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _PartyAffairs_AddTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _PartyAffairs_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _PartyAffairs_DeleteTask_Handler,
		},
		{
			MethodName: "PageTaskValue",
			Handler:    _PartyAffairs_PageTaskValue_Handler,
		},
		{
			MethodName: "GetTaskValue",
			Handler:    _PartyAffairs_GetTaskValue_Handler,
		},
		{
			MethodName: "ExportTaskValue",
			Handler:    _PartyAffairs_ExportTaskValue_Handler,
		},
		{
			MethodName: "GetCurTaskValue",
			Handler:    _PartyAffairs_GetCurTaskValue_Handler,
		},
		{
			MethodName: "AddTaskValue",
			Handler:    _PartyAffairs_AddTaskValue_Handler,
		},
		{
			MethodName: "UpdateTaskValue",
			Handler:    _PartyAffairs_UpdateTaskValue_Handler,
		},
		{
			MethodName: "DeleteTaskValue",
			Handler:    _PartyAffairs_DeleteTaskValue_Handler,
		},
		{
			MethodName: "PageVideoClassify",
			Handler:    _PartyAffairs_PageVideoClassify_Handler,
		},
		{
			MethodName: "AddVideoClassify",
			Handler:    _PartyAffairs_AddVideoClassify_Handler,
		},
		{
			MethodName: "UpdateVideoClassify",
			Handler:    _PartyAffairs_UpdateVideoClassify_Handler,
		},
		{
			MethodName: "DeleteVideoClassify",
			Handler:    _PartyAffairs_DeleteVideoClassify_Handler,
		},
		{
			MethodName: "PageVideoContent",
			Handler:    _PartyAffairs_PageVideoContent_Handler,
		},
		{
			MethodName: "GetVideoContent",
			Handler:    _PartyAffairs_GetVideoContent_Handler,
		},
		{
			MethodName: "AddVideoContent",
			Handler:    _PartyAffairs_AddVideoContent_Handler,
		},
		{
			MethodName: "UpdateVideoContent",
			Handler:    _PartyAffairs_UpdateVideoContent_Handler,
		},
		{
			MethodName: "DeleteVideoContent",
			Handler:    _PartyAffairs_DeleteVideoContent_Handler,
		},
		{
			MethodName: "UpdateUserVideoProcess",
			Handler:    _PartyAffairs_UpdateUserVideoProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/partyaffairs/partyaffairs_service.proto",
}
