// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/partyaffairs/partyaffairs_resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ResourceClassify with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceClassify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceClassifyMultiError, or nil if none found.
func (m *ResourceClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if len(errors) > 0 {
		return ResourceClassifyMultiError(errors)
	}

	return nil
}

// ResourceClassifyMultiError is an error wrapping multiple validation errors
// returned by ResourceClassify.ValidateAll() if the designated constraints
// aren't met.
type ResourceClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceClassifyMultiError) AllErrors() []error { return m }

// ResourceClassifyValidationError is the validation error returned by
// ResourceClassify.Validate if the designated constraints aren't met.
type ResourceClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceClassifyValidationError) ErrorName() string { return "ResourceClassifyValidationError" }

// Error satisfies the builtin error interface
func (e ResourceClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceClassifyValidationError{}

// Validate checks the field values on AllResourceClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllResourceClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResourceClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllResourceClassifyReplyMultiError, or nil if none found.
func (m *AllResourceClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResourceClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllResourceClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllResourceClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllResourceClassifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllResourceClassifyReplyMultiError(errors)
	}

	return nil
}

// AllResourceClassifyReplyMultiError is an error wrapping multiple validation
// errors returned by AllResourceClassifyReply.ValidateAll() if the designated
// constraints aren't met.
type AllResourceClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResourceClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResourceClassifyReplyMultiError) AllErrors() []error { return m }

// AllResourceClassifyReplyValidationError is the validation error returned by
// AllResourceClassifyReply.Validate if the designated constraints aren't met.
type AllResourceClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResourceClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResourceClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResourceClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResourceClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResourceClassifyReplyValidationError) ErrorName() string {
	return "AllResourceClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllResourceClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResourceClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResourceClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResourceClassifyReplyValidationError{}

// Validate checks the field values on AddResourceClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceClassifyRequestMultiError, or nil if none found.
func (m *AddResourceClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddResourceClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := AddResourceClassifyRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddResourceClassifyRequestMultiError(errors)
	}

	return nil
}

// AddResourceClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by AddResourceClassifyRequest.ValidateAll() if
// the designated constraints aren't met.
type AddResourceClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceClassifyRequestMultiError) AllErrors() []error { return m }

// AddResourceClassifyRequestValidationError is the validation error returned
// by AddResourceClassifyRequest.Validate if the designated constraints aren't met.
type AddResourceClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceClassifyRequestValidationError) ErrorName() string {
	return "AddResourceClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceClassifyRequestValidationError{}

// Validate checks the field values on UpdateResourceClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateResourceClassifyRequestMultiError, or nil if none found.
func (m *UpdateResourceClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateResourceClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateResourceClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := UpdateResourceClassifyRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateResourceClassifyRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateResourceClassifyRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateResourceClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceClassifyRequestMultiError) AllErrors() []error { return m }

// UpdateResourceClassifyRequestValidationError is the validation error
// returned by UpdateResourceClassifyRequest.Validate if the designated
// constraints aren't met.
type UpdateResourceClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceClassifyRequestValidationError) ErrorName() string {
	return "UpdateResourceClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceClassifyRequestValidationError{}

// Validate checks the field values on DeleteResourceClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteResourceClassifyRequestMultiError, or nil if none found.
func (m *DeleteResourceClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteResourceClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteResourceClassifyRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteResourceClassifyRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteResourceClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceClassifyRequestMultiError) AllErrors() []error { return m }

// DeleteResourceClassifyRequestValidationError is the validation error
// returned by DeleteResourceClassifyRequest.Validate if the designated
// constraints aren't met.
type DeleteResourceClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceClassifyRequestValidationError) ErrorName() string {
	return "DeleteResourceClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceClassifyRequestValidationError{}

// Validate checks the field values on ResourceContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceContentMultiError, or nil if none found.
func (m *ResourceContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Url

	// no validation rules for DownloadCount

	// no validation rules for ClassifyId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetResourceClassify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceContentValidationError{
					field:  "ResourceClassify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceContentValidationError{
					field:  "ResourceClassify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceClassify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceContentValidationError{
				field:  "ResourceClassify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceContentValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceContentValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceContentValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceContentMultiError(errors)
	}

	return nil
}

// ResourceContentMultiError is an error wrapping multiple validation errors
// returned by ResourceContent.ValidateAll() if the designated constraints
// aren't met.
type ResourceContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceContentMultiError) AllErrors() []error { return m }

// ResourceContentValidationError is the validation error returned by
// ResourceContent.Validate if the designated constraints aren't met.
type ResourceContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceContentValidationError) ErrorName() string { return "ResourceContentValidationError" }

// Error satisfies the builtin error interface
func (e ResourceContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceContentValidationError{}

// Validate checks the field values on GetResourceContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceContentRequestMultiError, or nil if none found.
func (m *GetResourceContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetResourceContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResourceContentRequestMultiError(errors)
	}

	return nil
}

// GetResourceContentRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourceContentRequest.ValidateAll() if the
// designated constraints aren't met.
type GetResourceContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceContentRequestMultiError) AllErrors() []error { return m }

// GetResourceContentRequestValidationError is the validation error returned by
// GetResourceContentRequest.Validate if the designated constraints aren't met.
type GetResourceContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceContentRequestValidationError) ErrorName() string {
	return "GetResourceContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceContentRequestValidationError{}

// Validate checks the field values on PageResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageResourceContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageResourceContentRequestMultiError, or nil if none found.
func (m *PageResourceContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageResourceContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageResourceContentRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageResourceContentRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ClassifyId != nil {
		// no validation rules for ClassifyId
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if len(errors) > 0 {
		return PageResourceContentRequestMultiError(errors)
	}

	return nil
}

// PageResourceContentRequestMultiError is an error wrapping multiple
// validation errors returned by PageResourceContentRequest.ValidateAll() if
// the designated constraints aren't met.
type PageResourceContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageResourceContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageResourceContentRequestMultiError) AllErrors() []error { return m }

// PageResourceContentRequestValidationError is the validation error returned
// by PageResourceContentRequest.Validate if the designated constraints aren't met.
type PageResourceContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResourceContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResourceContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResourceContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResourceContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResourceContentRequestValidationError) ErrorName() string {
	return "PageResourceContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageResourceContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResourceContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResourceContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResourceContentRequestValidationError{}

// Validate checks the field values on PageResourceContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageResourceContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageResourceContentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageResourceContentReplyMultiError, or nil if none found.
func (m *PageResourceContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageResourceContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageResourceContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageResourceContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageResourceContentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageResourceContentReplyMultiError(errors)
	}

	return nil
}

// PageResourceContentReplyMultiError is an error wrapping multiple validation
// errors returned by PageResourceContentReply.ValidateAll() if the designated
// constraints aren't met.
type PageResourceContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageResourceContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageResourceContentReplyMultiError) AllErrors() []error { return m }

// PageResourceContentReplyValidationError is the validation error returned by
// PageResourceContentReply.Validate if the designated constraints aren't met.
type PageResourceContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResourceContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResourceContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResourceContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResourceContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResourceContentReplyValidationError) ErrorName() string {
	return "PageResourceContentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageResourceContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResourceContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResourceContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResourceContentReplyValidationError{}

// Validate checks the field values on AddResourceContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceContentRequestMultiError, or nil if none found.
func (m *AddResourceContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AddResourceContentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := AddResourceContentRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := AddResourceContentRequestValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := AddResourceContentRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddResourceContentRequestMultiError(errors)
	}

	return nil
}

// AddResourceContentRequestMultiError is an error wrapping multiple validation
// errors returned by AddResourceContentRequest.ValidateAll() if the
// designated constraints aren't met.
type AddResourceContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceContentRequestMultiError) AllErrors() []error { return m }

// AddResourceContentRequestValidationError is the validation error returned by
// AddResourceContentRequest.Validate if the designated constraints aren't met.
type AddResourceContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceContentRequestValidationError) ErrorName() string {
	return "AddResourceContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceContentRequestValidationError{}

// Validate checks the field values on UpdateResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceContentRequestMultiError, or nil if none found.
func (m *UpdateResourceContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdateResourceContentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := UpdateResourceContentRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := UpdateResourceContentRequestValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := UpdateResourceContentRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := UpdateResourceContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateResourceContentRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceContentRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateResourceContentRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateResourceContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceContentRequestMultiError) AllErrors() []error { return m }

// UpdateResourceContentRequestValidationError is the validation error returned
// by UpdateResourceContentRequest.Validate if the designated constraints
// aren't met.
type UpdateResourceContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceContentRequestValidationError) ErrorName() string {
	return "UpdateResourceContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceContentRequestValidationError{}

// Validate checks the field values on DeleteResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceContentRequestMultiError, or nil if none found.
func (m *DeleteResourceContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteResourceContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteResourceContentRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceContentRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteResourceContentRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteResourceContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceContentRequestMultiError) AllErrors() []error { return m }

// DeleteResourceContentRequestValidationError is the validation error returned
// by DeleteResourceContentRequest.Validate if the designated constraints
// aren't met.
type DeleteResourceContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceContentRequestValidationError) ErrorName() string {
	return "DeleteResourceContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceContentRequestValidationError{}

// Validate checks the field values on ResourceContent_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceContent_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceContent_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceContent_FileMultiError, or nil if none found.
func (m *ResourceContent_File) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceContent_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sha

	// no validation rules for Url

	if len(errors) > 0 {
		return ResourceContent_FileMultiError(errors)
	}

	return nil
}

// ResourceContent_FileMultiError is an error wrapping multiple validation
// errors returned by ResourceContent_File.ValidateAll() if the designated
// constraints aren't met.
type ResourceContent_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceContent_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceContent_FileMultiError) AllErrors() []error { return m }

// ResourceContent_FileValidationError is the validation error returned by
// ResourceContent_File.Validate if the designated constraints aren't met.
type ResourceContent_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceContent_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceContent_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceContent_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceContent_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceContent_FileValidationError) ErrorName() string {
	return "ResourceContent_FileValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceContent_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceContent_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceContent_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceContent_FileValidationError{}
