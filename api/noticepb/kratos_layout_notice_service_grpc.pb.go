// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: kratos_layout_notice_service.proto

package noticepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_GetNotice_FullMethodName    = "/noticepb.Service/GetNotice"
	Service_PageNotice_FullMethodName   = "/noticepb.Service/PageNotice"
	Service_AddNotice_FullMethodName    = "/noticepb.Service/AddNotice"
	Service_UpdateNotice_FullMethodName = "/noticepb.Service/UpdateNotice"
	Service_DeleteNotice_FullMethodName = "/noticepb.Service/DeleteNotice"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// GetNotice 获取用户信息
	GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*Notice, error)
	PageNotice(ctx context.Context, in *PageNoticeRequest, opts ...grpc.CallOption) (*PageNoticeReply, error)
	AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*AddNoticeReply, error)
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*Notice, error) {
	out := new(Notice)
	err := c.cc.Invoke(ctx, Service_GetNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageNotice(ctx context.Context, in *PageNoticeRequest, opts ...grpc.CallOption) (*PageNoticeReply, error) {
	out := new(PageNoticeReply)
	err := c.cc.Invoke(ctx, Service_PageNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...grpc.CallOption) (*AddNoticeReply, error) {
	out := new(AddNoticeReply)
	err := c.cc.Invoke(ctx, Service_AddNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// GetNotice 获取用户信息
	GetNotice(context.Context, *GetNoticeRequest) (*Notice, error)
	PageNotice(context.Context, *PageNoticeRequest) (*PageNoticeReply, error)
	AddNotice(context.Context, *AddNoticeRequest) (*AddNoticeReply, error)
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error)
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetNotice(context.Context, *GetNoticeRequest) (*Notice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (UnimplementedServiceServer) PageNotice(context.Context, *PageNoticeRequest) (*PageNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNotice not implemented")
}
func (UnimplementedServiceServer) AddNotice(context.Context, *AddNoticeRequest) (*AddNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotice not implemented")
}
func (UnimplementedServiceServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedServiceServer) DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetNotice(ctx, req.(*GetNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageNotice(ctx, req.(*PageNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddNotice(ctx, req.(*AddNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNotice(ctx, req.(*DeleteNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noticepb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotice",
			Handler:    _Service_GetNotice_Handler,
		},
		{
			MethodName: "PageNotice",
			Handler:    _Service_PageNotice_Handler,
		},
		{
			MethodName: "AddNotice",
			Handler:    _Service_AddNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _Service_UpdateNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _Service_DeleteNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kratos_layout_notice_service.proto",
}
