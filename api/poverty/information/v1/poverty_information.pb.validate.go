// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/poverty/information/poverty_information.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInformationRequestMultiError, or nil if none found.
func (m *GetInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetInformationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInformationRequestMultiError(errors)
	}

	return nil
}

// GetInformationRequestMultiError is an error wrapping multiple validation
// errors returned by GetInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInformationRequestMultiError) AllErrors() []error { return m }

// GetInformationRequestValidationError is the validation error returned by
// GetInformationRequest.Validate if the designated constraints aren't met.
type GetInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInformationRequestValidationError) ErrorName() string {
	return "GetInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInformationRequestValidationError{}

// Validate checks the field values on GetInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInformationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInformationReplyMultiError, or nil if none found.
func (m *GetInformationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInformationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Cover

	// no validation rules for Unit

	// no validation rules for Content

	// no validation rules for Read

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return GetInformationReplyMultiError(errors)
	}

	return nil
}

// GetInformationReplyMultiError is an error wrapping multiple validation
// errors returned by GetInformationReply.ValidateAll() if the designated
// constraints aren't met.
type GetInformationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInformationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInformationReplyMultiError) AllErrors() []error { return m }

// GetInformationReplyValidationError is the validation error returned by
// GetInformationReply.Validate if the designated constraints aren't met.
type GetInformationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInformationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInformationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInformationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInformationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInformationReplyValidationError) ErrorName() string {
	return "GetInformationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetInformationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInformationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInformationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInformationReplyValidationError{}

// Validate checks the field values on ListInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInformationRequestMultiError, or nil if none found.
func (m *ListInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListInformationRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListInformationRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListInformationRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListInformationRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListInformationRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListInformationRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id is_top created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
			err := ListInformationRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListInformationRequestMultiError(errors)
	}

	return nil
}

// ListInformationRequestMultiError is an error wrapping multiple validation
// errors returned by ListInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInformationRequestMultiError) AllErrors() []error { return m }

// ListInformationRequestValidationError is the validation error returned by
// ListInformationRequest.Validate if the designated constraints aren't met.
type ListInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInformationRequestValidationError) ErrorName() string {
	return "ListInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInformationRequestValidationError{}

var _ListInformationRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListInformationRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"is_top":     {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInformationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInformationReplyMultiError, or nil if none found.
func (m *ListInformationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInformationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInformationReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInformationReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInformationReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInformationReplyMultiError(errors)
	}

	return nil
}

// ListInformationReplyMultiError is an error wrapping multiple validation
// errors returned by ListInformationReply.ValidateAll() if the designated
// constraints aren't met.
type ListInformationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInformationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInformationReplyMultiError) AllErrors() []error { return m }

// ListInformationReplyValidationError is the validation error returned by
// ListInformationReply.Validate if the designated constraints aren't met.
type ListInformationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInformationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInformationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInformationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInformationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInformationReplyValidationError) ErrorName() string {
	return "ListInformationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInformationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInformationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInformationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInformationReplyValidationError{}

// Validate checks the field values on CreateInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInformationRequestMultiError, or nil if none found.
func (m *CreateInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
		err := CreateInformationRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateInformationRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := CreateInformationRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 1 {
		err := CreateInformationRequestValidationError{
			field:  "Unit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	// no validation rules for Read

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return CreateInformationRequestMultiError(errors)
	}

	return nil
}

// CreateInformationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInformationRequestMultiError) AllErrors() []error { return m }

// CreateInformationRequestValidationError is the validation error returned by
// CreateInformationRequest.Validate if the designated constraints aren't met.
type CreateInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInformationRequestValidationError) ErrorName() string {
	return "CreateInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInformationRequestValidationError{}

// Validate checks the field values on CreateInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInformationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInformationReplyMultiError, or nil if none found.
func (m *CreateInformationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInformationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateInformationReplyMultiError(errors)
	}

	return nil
}

// CreateInformationReplyMultiError is an error wrapping multiple validation
// errors returned by CreateInformationReply.ValidateAll() if the designated
// constraints aren't met.
type CreateInformationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInformationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInformationReplyMultiError) AllErrors() []error { return m }

// CreateInformationReplyValidationError is the validation error returned by
// CreateInformationReply.Validate if the designated constraints aren't met.
type CreateInformationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInformationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInformationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInformationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInformationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInformationReplyValidationError) ErrorName() string {
	return "CreateInformationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInformationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInformationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInformationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInformationReplyValidationError{}

// Validate checks the field values on UpdateInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInformationRequestMultiError, or nil if none found.
func (m *UpdateInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
			err := UpdateInformationRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) < 1 {
			err := UpdateInformationRequestValidationError{
				field:  "Description",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Cover != nil {

		if utf8.RuneCountInString(m.GetCover()) < 1 {
			err := UpdateInformationRequestValidationError{
				field:  "Cover",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Unit != nil {

		if utf8.RuneCountInString(m.GetUnit()) < 1 {
			err := UpdateInformationRequestValidationError{
				field:  "Unit",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Content != nil {
		// no validation rules for Content
	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Read != nil {
		// no validation rules for Read
	}

	if len(errors) > 0 {
		return UpdateInformationRequestMultiError(errors)
	}

	return nil
}

// UpdateInformationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInformationRequestMultiError) AllErrors() []error { return m }

// UpdateInformationRequestValidationError is the validation error returned by
// UpdateInformationRequest.Validate if the designated constraints aren't met.
type UpdateInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInformationRequestValidationError) ErrorName() string {
	return "UpdateInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInformationRequestValidationError{}

// Validate checks the field values on UpdateInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInformationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInformationReplyMultiError, or nil if none found.
func (m *UpdateInformationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInformationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInformationReplyMultiError(errors)
	}

	return nil
}

// UpdateInformationReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateInformationReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateInformationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInformationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInformationReplyMultiError) AllErrors() []error { return m }

// UpdateInformationReplyValidationError is the validation error returned by
// UpdateInformationReply.Validate if the designated constraints aren't met.
type UpdateInformationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInformationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInformationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInformationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInformationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInformationReplyValidationError) ErrorName() string {
	return "UpdateInformationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInformationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInformationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInformationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInformationReplyValidationError{}

// Validate checks the field values on DeleteInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInformationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInformationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInformationRequestMultiError, or nil if none found.
func (m *DeleteInformationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInformationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteInformationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInformationRequestMultiError(errors)
	}

	return nil
}

// DeleteInformationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInformationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInformationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInformationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInformationRequestMultiError) AllErrors() []error { return m }

// DeleteInformationRequestValidationError is the validation error returned by
// DeleteInformationRequest.Validate if the designated constraints aren't met.
type DeleteInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInformationRequestValidationError) ErrorName() string {
	return "DeleteInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInformationRequestValidationError{}

// Validate checks the field values on DeleteInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInformationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInformationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInformationReplyMultiError, or nil if none found.
func (m *DeleteInformationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInformationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInformationReplyMultiError(errors)
	}

	return nil
}

// DeleteInformationReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteInformationReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteInformationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInformationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInformationReplyMultiError) AllErrors() []error { return m }

// DeleteInformationReplyValidationError is the validation error returned by
// DeleteInformationReply.Validate if the designated constraints aren't met.
type DeleteInformationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInformationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInformationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInformationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInformationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInformationReplyValidationError) ErrorName() string {
	return "DeleteInformationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInformationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInformationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInformationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInformationReplyValidationError{}

// Validate checks the field values on ListInformationReply_Information with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListInformationReply_Information) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInformationReply_Information with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListInformationReply_InformationMultiError, or nil if none found.
func (m *ListInformationReply_Information) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInformationReply_Information) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Cover

	// no validation rules for Unit

	// no validation rules for Read

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListInformationReply_InformationMultiError(errors)
	}

	return nil
}

// ListInformationReply_InformationMultiError is an error wrapping multiple
// validation errors returned by
// ListInformationReply_Information.ValidateAll() if the designated
// constraints aren't met.
type ListInformationReply_InformationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInformationReply_InformationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInformationReply_InformationMultiError) AllErrors() []error { return m }

// ListInformationReply_InformationValidationError is the validation error
// returned by ListInformationReply_Information.Validate if the designated
// constraints aren't met.
type ListInformationReply_InformationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInformationReply_InformationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInformationReply_InformationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInformationReply_InformationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInformationReply_InformationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInformationReply_InformationValidationError) ErrorName() string {
	return "ListInformationReply_InformationValidationError"
}

// Error satisfies the builtin error interface
func (e ListInformationReply_InformationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInformationReply_Information.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInformationReply_InformationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInformationReply_InformationValidationError{}
