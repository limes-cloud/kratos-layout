// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/poverty/notice/poverty_notice_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notice_GetNotice_FullMethodName    = "/poverty.api.poverty.notice.v1.Notice/GetNotice"
	Notice_ListNotice_FullMethodName   = "/poverty.api.poverty.notice.v1.Notice/ListNotice"
	Notice_CreateNotice_FullMethodName = "/poverty.api.poverty.notice.v1.Notice/CreateNotice"
	Notice_UpdateNotice_FullMethodName = "/poverty.api.poverty.notice.v1.Notice/UpdateNotice"
	Notice_DeleteNotice_FullMethodName = "/poverty.api.poverty.notice.v1.Notice/DeleteNotice"
)

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoticeClient interface {
	// GetNotice 获取指定的通知信息
	GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*GetNoticeReply, error)
	// ListNotice 获取通知信息列表
	ListNotice(ctx context.Context, in *ListNoticeRequest, opts ...grpc.CallOption) (*ListNoticeReply, error)
	// CreateNotice 创建通知信息
	CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeReply, error)
	// UpdateNotice 更新通知信息
	UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*UpdateNoticeReply, error)
	// DeleteNotice 删除通知信息
	DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*DeleteNoticeReply, error)
}

type noticeClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeClient(cc grpc.ClientConnInterface) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...grpc.CallOption) (*GetNoticeReply, error) {
	out := new(GetNoticeReply)
	err := c.cc.Invoke(ctx, Notice_GetNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) ListNotice(ctx context.Context, in *ListNoticeRequest, opts ...grpc.CallOption) (*ListNoticeReply, error) {
	out := new(ListNoticeReply)
	err := c.cc.Invoke(ctx, Notice_ListNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...grpc.CallOption) (*CreateNoticeReply, error) {
	out := new(CreateNoticeReply)
	err := c.cc.Invoke(ctx, Notice_CreateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...grpc.CallOption) (*UpdateNoticeReply, error) {
	out := new(UpdateNoticeReply)
	err := c.cc.Invoke(ctx, Notice_UpdateNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...grpc.CallOption) (*DeleteNoticeReply, error) {
	out := new(DeleteNoticeReply)
	err := c.cc.Invoke(ctx, Notice_DeleteNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServer is the server API for Notice service.
// All implementations must embed UnimplementedNoticeServer
// for forward compatibility
type NoticeServer interface {
	// GetNotice 获取指定的通知信息
	GetNotice(context.Context, *GetNoticeRequest) (*GetNoticeReply, error)
	// ListNotice 获取通知信息列表
	ListNotice(context.Context, *ListNoticeRequest) (*ListNoticeReply, error)
	// CreateNotice 创建通知信息
	CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeReply, error)
	// UpdateNotice 更新通知信息
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeReply, error)
	// DeleteNotice 删除通知信息
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeReply, error)
	mustEmbedUnimplementedNoticeServer()
}

// UnimplementedNoticeServer must be embedded to have forward compatible implementations.
type UnimplementedNoticeServer struct {
}

func (UnimplementedNoticeServer) GetNotice(context.Context, *GetNoticeRequest) (*GetNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotice not implemented")
}
func (UnimplementedNoticeServer) ListNotice(context.Context, *ListNoticeRequest) (*ListNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotice not implemented")
}
func (UnimplementedNoticeServer) CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotice not implemented")
}
func (UnimplementedNoticeServer) UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotice not implemented")
}
func (UnimplementedNoticeServer) DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotice not implemented")
}
func (UnimplementedNoticeServer) mustEmbedUnimplementedNoticeServer() {}

// UnsafeNoticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoticeServer will
// result in compilation errors.
type UnsafeNoticeServer interface {
	mustEmbedUnimplementedNoticeServer()
}

func RegisterNoticeServer(s grpc.ServiceRegistrar, srv NoticeServer) {
	s.RegisterService(&Notice_ServiceDesc, srv)
}

func _Notice_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_GetNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).GetNotice(ctx, req.(*GetNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_ListNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).ListNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_ListNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).ListNotice(ctx, req.(*ListNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_CreateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).CreateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_CreateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).CreateNotice(ctx, req.(*CreateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_UpdateNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).UpdateNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_UpdateNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).UpdateNotice(ctx, req.(*UpdateNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_DeleteNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).DeleteNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_DeleteNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).DeleteNotice(ctx, req.(*DeleteNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Notice_ServiceDesc is the grpc.ServiceDesc for Notice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poverty.api.poverty.notice.v1.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotice",
			Handler:    _Notice_GetNotice_Handler,
		},
		{
			MethodName: "ListNotice",
			Handler:    _Notice_ListNotice_Handler,
		},
		{
			MethodName: "CreateNotice",
			Handler:    _Notice_CreateNotice_Handler,
		},
		{
			MethodName: "UpdateNotice",
			Handler:    _Notice_UpdateNotice_Handler,
		},
		{
			MethodName: "DeleteNotice",
			Handler:    _Notice_DeleteNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/poverty/notice/poverty_notice_service.proto",
}
