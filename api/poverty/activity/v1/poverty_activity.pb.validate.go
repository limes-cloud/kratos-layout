// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/poverty/activity/poverty_activity.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityRequestMultiError, or nil if none found.
func (m *GetActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetActivityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetActivityRequestMultiError(errors)
	}

	return nil
}

// GetActivityRequestMultiError is an error wrapping multiple validation errors
// returned by GetActivityRequest.ValidateAll() if the designated constraints
// aren't met.
type GetActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityRequestMultiError) AllErrors() []error { return m }

// GetActivityRequestValidationError is the validation error returned by
// GetActivityRequest.Validate if the designated constraints aren't met.
type GetActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityRequestValidationError) ErrorName() string {
	return "GetActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityRequestValidationError{}

// Validate checks the field values on GetActivityReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetActivityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivityReplyMultiError, or nil if none found.
func (m *GetActivityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Cover

	// no validation rules for Unit

	// no validation rules for Content

	// no validation rules for Read

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return GetActivityReplyMultiError(errors)
	}

	return nil
}

// GetActivityReplyMultiError is an error wrapping multiple validation errors
// returned by GetActivityReply.ValidateAll() if the designated constraints
// aren't met.
type GetActivityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivityReplyMultiError) AllErrors() []error { return m }

// GetActivityReplyValidationError is the validation error returned by
// GetActivityReply.Validate if the designated constraints aren't met.
type GetActivityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivityReplyValidationError) ErrorName() string { return "GetActivityReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetActivityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivityReplyValidationError{}

// Validate checks the field values on ListActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActivityRequestMultiError, or nil if none found.
func (m *ListActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListActivityRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListActivityRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListActivityRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListActivityRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListActivityRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListActivityRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id is_top created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
			err := ListActivityRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListActivityRequestMultiError(errors)
	}

	return nil
}

// ListActivityRequestMultiError is an error wrapping multiple validation
// errors returned by ListActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type ListActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActivityRequestMultiError) AllErrors() []error { return m }

// ListActivityRequestValidationError is the validation error returned by
// ListActivityRequest.Validate if the designated constraints aren't met.
type ListActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActivityRequestValidationError) ErrorName() string {
	return "ListActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActivityRequestValidationError{}

var _ListActivityRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListActivityRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"is_top":     {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListActivityReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListActivityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActivityReplyMultiError, or nil if none found.
func (m *ListActivityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActivityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListActivityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListActivityReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActivityReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListActivityReplyMultiError(errors)
	}

	return nil
}

// ListActivityReplyMultiError is an error wrapping multiple validation errors
// returned by ListActivityReply.ValidateAll() if the designated constraints
// aren't met.
type ListActivityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActivityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActivityReplyMultiError) AllErrors() []error { return m }

// ListActivityReplyValidationError is the validation error returned by
// ListActivityReply.Validate if the designated constraints aren't met.
type ListActivityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActivityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActivityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActivityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActivityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActivityReplyValidationError) ErrorName() string {
	return "ListActivityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListActivityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActivityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActivityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActivityReplyValidationError{}

// Validate checks the field values on CreateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateActivityRequestMultiError, or nil if none found.
func (m *CreateActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
		err := CreateActivityRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateActivityRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := CreateActivityRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 1 {
		err := CreateActivityRequestValidationError{
			field:  "Unit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	// no validation rules for Read

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return CreateActivityRequestMultiError(errors)
	}

	return nil
}

// CreateActivityRequestMultiError is an error wrapping multiple validation
// errors returned by CreateActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateActivityRequestMultiError) AllErrors() []error { return m }

// CreateActivityRequestValidationError is the validation error returned by
// CreateActivityRequest.Validate if the designated constraints aren't met.
type CreateActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateActivityRequestValidationError) ErrorName() string {
	return "CreateActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateActivityRequestValidationError{}

// Validate checks the field values on CreateActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateActivityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateActivityReplyMultiError, or nil if none found.
func (m *CreateActivityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateActivityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateActivityReplyMultiError(errors)
	}

	return nil
}

// CreateActivityReplyMultiError is an error wrapping multiple validation
// errors returned by CreateActivityReply.ValidateAll() if the designated
// constraints aren't met.
type CreateActivityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateActivityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateActivityReplyMultiError) AllErrors() []error { return m }

// CreateActivityReplyValidationError is the validation error returned by
// CreateActivityReply.Validate if the designated constraints aren't met.
type CreateActivityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateActivityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateActivityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateActivityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateActivityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateActivityReplyValidationError) ErrorName() string {
	return "CreateActivityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateActivityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateActivityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateActivityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateActivityReplyValidationError{}

// Validate checks the field values on UpdateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateActivityRequestMultiError, or nil if none found.
func (m *UpdateActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
			err := UpdateActivityRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) < 1 {
			err := UpdateActivityRequestValidationError{
				field:  "Description",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Cover != nil {

		if utf8.RuneCountInString(m.GetCover()) < 1 {
			err := UpdateActivityRequestValidationError{
				field:  "Cover",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Unit != nil {

		if utf8.RuneCountInString(m.GetUnit()) < 1 {
			err := UpdateActivityRequestValidationError{
				field:  "Unit",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Content != nil {
		// no validation rules for Content
	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Read != nil {
		// no validation rules for Read
	}

	if len(errors) > 0 {
		return UpdateActivityRequestMultiError(errors)
	}

	return nil
}

// UpdateActivityRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateActivityRequestMultiError) AllErrors() []error { return m }

// UpdateActivityRequestValidationError is the validation error returned by
// UpdateActivityRequest.Validate if the designated constraints aren't met.
type UpdateActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActivityRequestValidationError) ErrorName() string {
	return "UpdateActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActivityRequestValidationError{}

// Validate checks the field values on UpdateActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateActivityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateActivityReplyMultiError, or nil if none found.
func (m *UpdateActivityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateActivityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateActivityReplyMultiError(errors)
	}

	return nil
}

// UpdateActivityReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateActivityReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateActivityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateActivityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateActivityReplyMultiError) AllErrors() []error { return m }

// UpdateActivityReplyValidationError is the validation error returned by
// UpdateActivityReply.Validate if the designated constraints aren't met.
type UpdateActivityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActivityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActivityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActivityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActivityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActivityReplyValidationError) ErrorName() string {
	return "UpdateActivityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActivityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActivityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActivityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActivityReplyValidationError{}

// Validate checks the field values on DeleteActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteActivityRequestMultiError, or nil if none found.
func (m *DeleteActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteActivityRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteActivityRequestMultiError(errors)
	}

	return nil
}

// DeleteActivityRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteActivityRequestMultiError) AllErrors() []error { return m }

// DeleteActivityRequestValidationError is the validation error returned by
// DeleteActivityRequest.Validate if the designated constraints aren't met.
type DeleteActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActivityRequestValidationError) ErrorName() string {
	return "DeleteActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActivityRequestValidationError{}

// Validate checks the field values on DeleteActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteActivityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteActivityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteActivityReplyMultiError, or nil if none found.
func (m *DeleteActivityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteActivityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteActivityReplyMultiError(errors)
	}

	return nil
}

// DeleteActivityReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteActivityReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteActivityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteActivityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteActivityReplyMultiError) AllErrors() []error { return m }

// DeleteActivityReplyValidationError is the validation error returned by
// DeleteActivityReply.Validate if the designated constraints aren't met.
type DeleteActivityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActivityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActivityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActivityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActivityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActivityReplyValidationError) ErrorName() string {
	return "DeleteActivityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActivityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActivityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActivityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActivityReplyValidationError{}

// Validate checks the field values on ListActivityReply_Activity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListActivityReply_Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListActivityReply_Activity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListActivityReply_ActivityMultiError, or nil if none found.
func (m *ListActivityReply_Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *ListActivityReply_Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Cover

	// no validation rules for Unit

	// no validation rules for Read

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListActivityReply_ActivityMultiError(errors)
	}

	return nil
}

// ListActivityReply_ActivityMultiError is an error wrapping multiple
// validation errors returned by ListActivityReply_Activity.ValidateAll() if
// the designated constraints aren't met.
type ListActivityReply_ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListActivityReply_ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListActivityReply_ActivityMultiError) AllErrors() []error { return m }

// ListActivityReply_ActivityValidationError is the validation error returned
// by ListActivityReply_Activity.Validate if the designated constraints aren't met.
type ListActivityReply_ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActivityReply_ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActivityReply_ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActivityReply_ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActivityReply_ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActivityReply_ActivityValidationError) ErrorName() string {
	return "ListActivityReply_ActivityValidationError"
}

// Error satisfies the builtin error interface
func (e ListActivityReply_ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActivityReply_Activity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActivityReply_ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActivityReply_ActivityValidationError{}
