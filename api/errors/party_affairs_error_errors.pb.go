// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsNotFoundError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_NotFoundError.String() && e.Code == 200
}

func NotFoundError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_NotFoundError.String(), "数据不存在")
	case 1:
		return errors.New(200, Reason_NotFoundError.String(), "数据不存在:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_NotFoundError.String(), "数据不存在:"+msg)
	}
}

func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_DatabaseError.String() && e.Code == 200
}

func DatabaseError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_DatabaseError.String(), "数据库错误")
	case 1:
		return errors.New(200, Reason_DatabaseError.String(), "数据库错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_DatabaseError.String(), "数据库错误:"+msg)
	}
}

func IsMetadataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_MetadataError.String() && e.Code == 200
}

func MetadataError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_MetadataError.String(), "元数据异常")
	case 1:
		return errors.New(200, Reason_MetadataError.String(), "元数据异常:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_MetadataError.String(), "元数据异常:"+msg)
	}
}

func IsTransformError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_TransformError.String() && e.Code == 200
}

func TransformError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_TransformError.String(), "数据转换失败")
	case 1:
		return errors.New(200, Reason_TransformError.String(), "数据转换失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_TransformError.String(), "数据转换失败:"+msg)
	}
}

func IsDataError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_DataError.String() && e.Code == 200
}

func DataError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_DataError.String(), "数据错误")
	case 1:
		return errors.New(200, Reason_DataError.String(), "数据错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_DataError.String(), "数据错误:"+msg)
	}
}

func IsResourceServiceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_ResourceServiceError.String() && e.Code == 200
}

func ResourceServiceError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_ResourceServiceError.String(), "资源服务异常")
	case 1:
		return errors.New(200, Reason_ResourceServiceError.String(), "资源服务异常:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_ResourceServiceError.String(), "资源服务异常:"+msg)
	}
}

func IsGetAuthInfoError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_GetAuthInfoError.String() && e.Code == 200
}

func GetAuthInfoError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_GetAuthInfoError.String(), "获取授权信息失败")
	case 1:
		return errors.New(200, Reason_GetAuthInfoError.String(), "获取授权信息失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_GetAuthInfoError.String(), "获取授权信息失败:"+msg)
	}
}

func IsUnBindError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_UnBindError.String() && e.Code == 401
}

func UnBindError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(401, Reason_UnBindError.String(), "用户未绑定")
	case 1:
		return errors.New(401, Reason_UnBindError.String(), "用户未绑定:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(401, Reason_UnBindError.String(), "用户未绑定:"+msg)
	}
}

func IsBindError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_BindError.String() && e.Code == 401
}

func BindError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(401, Reason_BindError.String(), "用户未绑定")
	case 1:
		return errors.New(401, Reason_BindError.String(), "用户未绑定:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(401, Reason_BindError.String(), "用户未绑定:"+msg)
	}
}

func IsLoginError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_LoginError.String() && e.Code == 200
}

func LoginError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_LoginError.String(), "登录失败")
	case 1:
		return errors.New(200, Reason_LoginError.String(), "登录失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_LoginError.String(), "登录失败:"+msg)
	}
}

func IsAlreadyBindError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_AlreadyBindError.String() && e.Code == 200
}

func AlreadyBindError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_AlreadyBindError.String(), "已存在绑定信息")
	case 1:
		return errors.New(200, Reason_AlreadyBindError.String(), "已存在绑定信息:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_AlreadyBindError.String(), "已存在绑定信息:"+msg)
	}
}

func IsUsernameFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_UsernameFormatError.String() && e.Code == 200
}

func UsernameFormatError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_UsernameFormatError.String(), "用户名格式错误")
	case 1:
		return errors.New(200, Reason_UsernameFormatError.String(), "用户名格式错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_UsernameFormatError.String(), "用户名格式错误:"+msg)
	}
}

func IsCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_CaptchaError.String() && e.Code == 200
}

func CaptchaError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_CaptchaError.String(), "验证码错误")
	case 1:
		return errors.New(200, Reason_CaptchaError.String(), "验证码错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_CaptchaError.String(), "验证码错误:"+msg)
	}
}

func IsUsernameNotExistError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_UsernameNotExistError.String() && e.Code == 200
}

func UsernameNotExistError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_UsernameNotExistError.String(), "账户信息不存在")
	case 1:
		return errors.New(200, Reason_UsernameNotExistError.String(), "账户信息不存在:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_UsernameNotExistError.String(), "账户信息不存在:"+msg)
	}
}

func IsSendEmailCaptchaError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_SendEmailCaptchaError.String() && e.Code == 200
}

func SendEmailCaptchaError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_SendEmailCaptchaError.String(), "发送验证码失败")
	case 1:
		return errors.New(200, Reason_SendEmailCaptchaError.String(), "发送验证码失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_SendEmailCaptchaError.String(), "发送验证码失败:"+msg)
	}
}

func IsRefreshTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_RefreshTokenError.String() && e.Code == 401
}

func RefreshTokenError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(401, Reason_RefreshTokenError.String(), "刷新token失败")
	case 1:
		return errors.New(401, Reason_RefreshTokenError.String(), "刷新token失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(401, Reason_RefreshTokenError.String(), "刷新token失败:"+msg)
	}
}

func IsAuthInfoError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_AuthInfoError.String() && e.Code == 200
}

func AuthInfoError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_AuthInfoError.String(), "授权信息错误")
	case 1:
		return errors.New(200, Reason_AuthInfoError.String(), "授权信息错误:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_AuthInfoError.String(), "授权信息错误:"+msg)
	}
}

func IsUserCenterError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_UserCenterError.String() && e.Code == 200
}

func UserCenterError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_UserCenterError.String(), "用户中心连接失败")
	case 1:
		return errors.New(200, Reason_UserCenterError.String(), "用户中心连接失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_UserCenterError.String(), "用户中心连接失败:"+msg)
	}
}

func IsResourceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == Reason_ResourceError.String() && e.Code == 200
}

func ResourceError(args ...any) *errors.Error {
	switch len(args) {
	case 0:
		return errors.New(200, Reason_ResourceError.String(), "资源中心连接失败")
	case 1:
		return errors.New(200, Reason_ResourceError.String(), "资源中心连接失败:"+fmt.Sprint(args[0]))
	default:
		msg := fmt.Sprintf(fmt.Sprint(args[0]), args[1:]...)
		return errors.New(200, Reason_ResourceError.String(), "资源中心连接失败:"+msg)
	}
}
