// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/partyaffairs/task/partyaffairs_task_value.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCurTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurTaskValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurTaskValueRequestMultiError, or nil if none found.
func (m *GetCurTaskValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurTaskValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() < 1 {
		err := GetCurTaskValueRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCurTaskValueRequestMultiError(errors)
	}

	return nil
}

// GetCurTaskValueRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurTaskValueRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurTaskValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurTaskValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurTaskValueRequestMultiError) AllErrors() []error { return m }

// GetCurTaskValueRequestValidationError is the validation error returned by
// GetCurTaskValueRequest.Validate if the designated constraints aren't met.
type GetCurTaskValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurTaskValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurTaskValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurTaskValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurTaskValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurTaskValueRequestValidationError) ErrorName() string {
	return "GetCurTaskValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurTaskValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurTaskValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurTaskValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurTaskValueRequestValidationError{}

// Validate checks the field values on GetCurTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurTaskValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurTaskValueReplyMultiError, or nil if none found.
func (m *GetCurTaskValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurTaskValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TaskId

	// no validation rules for UserId

	// no validation rules for Value

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetCurTaskValueReplyMultiError(errors)
	}

	return nil
}

// GetCurTaskValueReplyMultiError is an error wrapping multiple validation
// errors returned by GetCurTaskValueReply.ValidateAll() if the designated
// constraints aren't met.
type GetCurTaskValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurTaskValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurTaskValueReplyMultiError) AllErrors() []error { return m }

// GetCurTaskValueReplyValidationError is the validation error returned by
// GetCurTaskValueReply.Validate if the designated constraints aren't met.
type GetCurTaskValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurTaskValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurTaskValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurTaskValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurTaskValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurTaskValueReplyValidationError) ErrorName() string {
	return "GetCurTaskValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurTaskValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurTaskValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurTaskValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurTaskValueReplyValidationError{}

// Validate checks the field values on GetTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskValueRequestMultiError, or nil if none found.
func (m *GetTaskValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() < 1 {
		err := GetTaskValueRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := GetTaskValueRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTaskValueRequestMultiError(errors)
	}

	return nil
}

// GetTaskValueRequestMultiError is an error wrapping multiple validation
// errors returned by GetTaskValueRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTaskValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskValueRequestMultiError) AllErrors() []error { return m }

// GetTaskValueRequestValidationError is the validation error returned by
// GetTaskValueRequest.Validate if the designated constraints aren't met.
type GetTaskValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskValueRequestValidationError) ErrorName() string {
	return "GetTaskValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskValueRequestValidationError{}

// Validate checks the field values on GetTaskValueReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTaskValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskValueReplyMultiError, or nil if none found.
func (m *GetTaskValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TaskId

	// no validation rules for UserId

	// no validation rules for Value

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTaskValueReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTaskValueReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTaskValueReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTaskValueReplyMultiError(errors)
	}

	return nil
}

// GetTaskValueReplyMultiError is an error wrapping multiple validation errors
// returned by GetTaskValueReply.ValidateAll() if the designated constraints
// aren't met.
type GetTaskValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskValueReplyMultiError) AllErrors() []error { return m }

// GetTaskValueReplyValidationError is the validation error returned by
// GetTaskValueReply.Validate if the designated constraints aren't met.
type GetTaskValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskValueReplyValidationError) ErrorName() string {
	return "GetTaskValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskValueReplyValidationError{}

// Validate checks the field values on ListTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskValueRequestMultiError, or nil if none found.
func (m *ListTaskValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListTaskValueRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListTaskValueRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTaskId() < 1 {
		err := ListTaskValueRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.UserId != nil {

		if m.GetUserId() < 1 {
			err := ListTaskValueRequestValidationError{
				field:  "UserId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Finish != nil {
		// no validation rules for Finish
	}

	if len(errors) > 0 {
		return ListTaskValueRequestMultiError(errors)
	}

	return nil
}

// ListTaskValueRequestMultiError is an error wrapping multiple validation
// errors returned by ListTaskValueRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTaskValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskValueRequestMultiError) AllErrors() []error { return m }

// ListTaskValueRequestValidationError is the validation error returned by
// ListTaskValueRequest.Validate if the designated constraints aren't met.
type ListTaskValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskValueRequestValidationError) ErrorName() string {
	return "ListTaskValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskValueRequestValidationError{}

// Validate checks the field values on ListTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskValueReplyMultiError, or nil if none found.
func (m *ListTaskValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaskValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaskValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaskValueReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTaskValueReplyMultiError(errors)
	}

	return nil
}

// ListTaskValueReplyMultiError is an error wrapping multiple validation errors
// returned by ListTaskValueReply.ValidateAll() if the designated constraints
// aren't met.
type ListTaskValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskValueReplyMultiError) AllErrors() []error { return m }

// ListTaskValueReplyValidationError is the validation error returned by
// ListTaskValueReply.Validate if the designated constraints aren't met.
type ListTaskValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskValueReplyValidationError) ErrorName() string {
	return "ListTaskValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskValueReplyValidationError{}

// Validate checks the field values on ExportTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportTaskValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportTaskValueRequestMultiError, or nil if none found.
func (m *ExportTaskValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportTaskValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() < 1 {
		err := ExportTaskValueRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExportTaskValueRequestMultiError(errors)
	}

	return nil
}

// ExportTaskValueRequestMultiError is an error wrapping multiple validation
// errors returned by ExportTaskValueRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportTaskValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportTaskValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportTaskValueRequestMultiError) AllErrors() []error { return m }

// ExportTaskValueRequestValidationError is the validation error returned by
// ExportTaskValueRequest.Validate if the designated constraints aren't met.
type ExportTaskValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportTaskValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportTaskValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportTaskValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportTaskValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportTaskValueRequestValidationError) ErrorName() string {
	return "ExportTaskValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportTaskValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportTaskValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportTaskValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportTaskValueRequestValidationError{}

// Validate checks the field values on ExportTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportTaskValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportTaskValueReplyMultiError, or nil if none found.
func (m *ExportTaskValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportTaskValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ExportTaskValueReplyMultiError(errors)
	}

	return nil
}

// ExportTaskValueReplyMultiError is an error wrapping multiple validation
// errors returned by ExportTaskValueReply.ValidateAll() if the designated
// constraints aren't met.
type ExportTaskValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportTaskValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportTaskValueReplyMultiError) AllErrors() []error { return m }

// ExportTaskValueReplyValidationError is the validation error returned by
// ExportTaskValueReply.Validate if the designated constraints aren't met.
type ExportTaskValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportTaskValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportTaskValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportTaskValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportTaskValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportTaskValueReplyValidationError) ErrorName() string {
	return "ExportTaskValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExportTaskValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportTaskValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportTaskValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportTaskValueReplyValidationError{}

// Validate checks the field values on CreateTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskValueRequestMultiError, or nil if none found.
func (m *CreateTaskValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() < 1 {
		err := CreateTaskValueRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := CreateTaskValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTaskValueRequestMultiError(errors)
	}

	return nil
}

// CreateTaskValueRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTaskValueRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTaskValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskValueRequestMultiError) AllErrors() []error { return m }

// CreateTaskValueRequestValidationError is the validation error returned by
// CreateTaskValueRequest.Validate if the designated constraints aren't met.
type CreateTaskValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskValueRequestValidationError) ErrorName() string {
	return "CreateTaskValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskValueRequestValidationError{}

// Validate checks the field values on CreateTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskValueReplyMultiError, or nil if none found.
func (m *CreateTaskValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTaskValueReplyMultiError(errors)
	}

	return nil
}

// CreateTaskValueReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTaskValueReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTaskValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskValueReplyMultiError) AllErrors() []error { return m }

// CreateTaskValueReplyValidationError is the validation error returned by
// CreateTaskValueReply.Validate if the designated constraints aren't met.
type CreateTaskValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskValueReplyValidationError) ErrorName() string {
	return "CreateTaskValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTaskValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskValueReplyValidationError{}

// Validate checks the field values on UpdateTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskValueRequestMultiError, or nil if none found.
func (m *UpdateTaskValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTaskId() < 1 {
		err := UpdateTaskValueRequestValidationError{
			field:  "TaskId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := UpdateTaskValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateTaskValueRequestMultiError(errors)
	}

	return nil
}

// UpdateTaskValueRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTaskValueRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTaskValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskValueRequestMultiError) AllErrors() []error { return m }

// UpdateTaskValueRequestValidationError is the validation error returned by
// UpdateTaskValueRequest.Validate if the designated constraints aren't met.
type UpdateTaskValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskValueRequestValidationError) ErrorName() string {
	return "UpdateTaskValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskValueRequestValidationError{}

// Validate checks the field values on UpdateTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskValueReplyMultiError, or nil if none found.
func (m *UpdateTaskValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTaskValueReplyMultiError(errors)
	}

	return nil
}

// UpdateTaskValueReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTaskValueReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTaskValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskValueReplyMultiError) AllErrors() []error { return m }

// UpdateTaskValueReplyValidationError is the validation error returned by
// UpdateTaskValueReply.Validate if the designated constraints aren't met.
type UpdateTaskValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskValueReplyValidationError) ErrorName() string {
	return "UpdateTaskValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskValueReplyValidationError{}

// Validate checks the field values on DeleteTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskValueRequestMultiError, or nil if none found.
func (m *DeleteTaskValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteTaskValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTaskValueRequestMultiError(errors)
	}

	return nil
}

// DeleteTaskValueRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTaskValueRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTaskValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskValueRequestMultiError) AllErrors() []error { return m }

// DeleteTaskValueRequestValidationError is the validation error returned by
// DeleteTaskValueRequest.Validate if the designated constraints aren't met.
type DeleteTaskValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskValueRequestValidationError) ErrorName() string {
	return "DeleteTaskValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskValueRequestValidationError{}

// Validate checks the field values on DeleteTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTaskValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTaskValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTaskValueReplyMultiError, or nil if none found.
func (m *DeleteTaskValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTaskValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTaskValueReplyMultiError(errors)
	}

	return nil
}

// DeleteTaskValueReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTaskValueReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTaskValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTaskValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTaskValueReplyMultiError) AllErrors() []error { return m }

// DeleteTaskValueReplyValidationError is the validation error returned by
// DeleteTaskValueReply.Validate if the designated constraints aren't met.
type DeleteTaskValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTaskValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTaskValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTaskValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTaskValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTaskValueReplyValidationError) ErrorName() string {
	return "DeleteTaskValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTaskValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTaskValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTaskValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTaskValueReplyValidationError{}

// Validate checks the field values on GetTaskValueReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTaskValueReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTaskValueReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTaskValueReply_UserMultiError, or nil if none found.
func (m *GetTaskValueReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTaskValueReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if len(errors) > 0 {
		return GetTaskValueReply_UserMultiError(errors)
	}

	return nil
}

// GetTaskValueReply_UserMultiError is an error wrapping multiple validation
// errors returned by GetTaskValueReply_User.ValidateAll() if the designated
// constraints aren't met.
type GetTaskValueReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTaskValueReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTaskValueReply_UserMultiError) AllErrors() []error { return m }

// GetTaskValueReply_UserValidationError is the validation error returned by
// GetTaskValueReply_User.Validate if the designated constraints aren't met.
type GetTaskValueReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTaskValueReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTaskValueReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTaskValueReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTaskValueReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTaskValueReply_UserValidationError) ErrorName() string {
	return "GetTaskValueReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetTaskValueReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTaskValueReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTaskValueReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTaskValueReply_UserValidationError{}

// Validate checks the field values on ListTaskValueReply_Value with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskValueReply_Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskValueReply_Value with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskValueReply_ValueMultiError, or nil if none found.
func (m *ListTaskValueReply_Value) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskValueReply_Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TaskId

	// no validation rules for UserId

	// no validation rules for Value

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTaskValueReply_ValueValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTaskValueReply_ValueValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTaskValueReply_ValueValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTaskValueReply_ValueMultiError(errors)
	}

	return nil
}

// ListTaskValueReply_ValueMultiError is an error wrapping multiple validation
// errors returned by ListTaskValueReply_Value.ValidateAll() if the designated
// constraints aren't met.
type ListTaskValueReply_ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskValueReply_ValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskValueReply_ValueMultiError) AllErrors() []error { return m }

// ListTaskValueReply_ValueValidationError is the validation error returned by
// ListTaskValueReply_Value.Validate if the designated constraints aren't met.
type ListTaskValueReply_ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskValueReply_ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskValueReply_ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskValueReply_ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskValueReply_ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskValueReply_ValueValidationError) ErrorName() string {
	return "ListTaskValueReply_ValueValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskValueReply_ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskValueReply_Value.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskValueReply_ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskValueReply_ValueValidationError{}

// Validate checks the field values on ListTaskValueReply_Value_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskValueReply_Value_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskValueReply_Value_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTaskValueReply_Value_UserMultiError, or nil if none found.
func (m *ListTaskValueReply_Value_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskValueReply_Value_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if len(errors) > 0 {
		return ListTaskValueReply_Value_UserMultiError(errors)
	}

	return nil
}

// ListTaskValueReply_Value_UserMultiError is an error wrapping multiple
// validation errors returned by ListTaskValueReply_Value_User.ValidateAll()
// if the designated constraints aren't met.
type ListTaskValueReply_Value_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskValueReply_Value_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskValueReply_Value_UserMultiError) AllErrors() []error { return m }

// ListTaskValueReply_Value_UserValidationError is the validation error
// returned by ListTaskValueReply_Value_User.Validate if the designated
// constraints aren't met.
type ListTaskValueReply_Value_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskValueReply_Value_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskValueReply_Value_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskValueReply_Value_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskValueReply_Value_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskValueReply_Value_UserValidationError) ErrorName() string {
	return "ListTaskValueReply_Value_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskValueReply_Value_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskValueReply_Value_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskValueReply_Value_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskValueReply_Value_UserValidationError{}
