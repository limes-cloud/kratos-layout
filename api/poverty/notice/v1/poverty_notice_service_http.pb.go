// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/poverty/notice/poverty_notice_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNoticeCreateNotice = "/poverty.api.poverty.notice.v1.Notice/CreateNotice"
const OperationNoticeDeleteNotice = "/poverty.api.poverty.notice.v1.Notice/DeleteNotice"
const OperationNoticeGetNotice = "/poverty.api.poverty.notice.v1.Notice/GetNotice"
const OperationNoticeListNotice = "/poverty.api.poverty.notice.v1.Notice/ListNotice"
const OperationNoticeUpdateNotice = "/poverty.api.poverty.notice.v1.Notice/UpdateNotice"

type NoticeHTTPServer interface {
	// CreateNotice CreateNotice 创建通知信息
	CreateNotice(context.Context, *CreateNoticeRequest) (*CreateNoticeReply, error)
	// DeleteNotice DeleteNotice 删除通知信息
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*DeleteNoticeReply, error)
	// GetNotice GetNotice 获取指定的通知信息
	GetNotice(context.Context, *GetNoticeRequest) (*GetNoticeReply, error)
	// ListNotice ListNotice 获取通知信息列表
	ListNotice(context.Context, *ListNoticeRequest) (*ListNoticeReply, error)
	// UpdateNotice UpdateNotice 更新通知信息
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*UpdateNoticeReply, error)
}

func RegisterNoticeHTTPServer(s *http.Server, srv NoticeHTTPServer) {
	r := s.Route("/")
	r.GET("/poverty/client/v1/notice", _Notice_GetNotice0_HTTP_Handler(srv))
	r.GET("/poverty/api/v1/notice", _Notice_GetNotice1_HTTP_Handler(srv))
	r.GET("/poverty/client/v1/notices", _Notice_ListNotice0_HTTP_Handler(srv))
	r.GET("/poverty/api/v1/notices", _Notice_ListNotice1_HTTP_Handler(srv))
	r.POST("/poverty/api/v1/notice", _Notice_CreateNotice0_HTTP_Handler(srv))
	r.PUT("/poverty/api/v1/notice", _Notice_UpdateNotice0_HTTP_Handler(srv))
	r.DELETE("/poverty/api/v1/notice", _Notice_DeleteNotice0_HTTP_Handler(srv))
}

func _Notice_GetNotice0_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeGetNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNotice(ctx, req.(*GetNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _Notice_GetNotice1_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeGetNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNotice(ctx, req.(*GetNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _Notice_ListNotice0_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeListNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListNotice(ctx, req.(*ListNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _Notice_ListNotice1_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeListNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListNotice(ctx, req.(*ListNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _Notice_CreateNotice0_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeCreateNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateNotice(ctx, req.(*CreateNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _Notice_UpdateNotice0_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeUpdateNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNotice(ctx, req.(*UpdateNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _Notice_DeleteNotice0_HTTP_Handler(srv NoticeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNoticeDeleteNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNotice(ctx, req.(*DeleteNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNoticeReply)
		return ctx.Result(200, reply)
	}
}

type NoticeHTTPClient interface {
	CreateNotice(ctx context.Context, req *CreateNoticeRequest, opts ...http.CallOption) (rsp *CreateNoticeReply, err error)
	DeleteNotice(ctx context.Context, req *DeleteNoticeRequest, opts ...http.CallOption) (rsp *DeleteNoticeReply, err error)
	GetNotice(ctx context.Context, req *GetNoticeRequest, opts ...http.CallOption) (rsp *GetNoticeReply, err error)
	ListNotice(ctx context.Context, req *ListNoticeRequest, opts ...http.CallOption) (rsp *ListNoticeReply, err error)
	UpdateNotice(ctx context.Context, req *UpdateNoticeRequest, opts ...http.CallOption) (rsp *UpdateNoticeReply, err error)
}

type NoticeHTTPClientImpl struct {
	cc *http.Client
}

func NewNoticeHTTPClient(client *http.Client) NoticeHTTPClient {
	return &NoticeHTTPClientImpl{client}
}

func (c *NoticeHTTPClientImpl) CreateNotice(ctx context.Context, in *CreateNoticeRequest, opts ...http.CallOption) (*CreateNoticeReply, error) {
	var out CreateNoticeReply
	pattern := "/poverty/api/v1/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoticeCreateNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoticeHTTPClientImpl) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...http.CallOption) (*DeleteNoticeReply, error) {
	var out DeleteNoticeReply
	pattern := "/poverty/api/v1/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeDeleteNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoticeHTTPClientImpl) GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...http.CallOption) (*GetNoticeReply, error) {
	var out GetNoticeReply
	pattern := "/poverty/api/v1/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeGetNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoticeHTTPClientImpl) ListNotice(ctx context.Context, in *ListNoticeRequest, opts ...http.CallOption) (*ListNoticeReply, error) {
	var out ListNoticeReply
	pattern := "/poverty/api/v1/notices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNoticeListNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NoticeHTTPClientImpl) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...http.CallOption) (*UpdateNoticeReply, error) {
	var out UpdateNoticeReply
	pattern := "/poverty/api/v1/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNoticeUpdateNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
