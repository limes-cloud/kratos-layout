// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/poverty/information/poverty_information_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInformationCreateInformation = "/poverty.api.poverty.information.v1.Information/CreateInformation"
const OperationInformationDeleteInformation = "/poverty.api.poverty.information.v1.Information/DeleteInformation"
const OperationInformationGetInformation = "/poverty.api.poverty.information.v1.Information/GetInformation"
const OperationInformationListInformation = "/poverty.api.poverty.information.v1.Information/ListInformation"
const OperationInformationUpdateInformation = "/poverty.api.poverty.information.v1.Information/UpdateInformation"

type InformationHTTPServer interface {
	// CreateInformation CreateInformation 创建咨询信息
	CreateInformation(context.Context, *CreateInformationRequest) (*CreateInformationReply, error)
	// DeleteInformation DeleteInformation 删除咨询信息
	DeleteInformation(context.Context, *DeleteInformationRequest) (*DeleteInformationReply, error)
	// GetInformation GetInformation 获取指定的咨询信息
	GetInformation(context.Context, *GetInformationRequest) (*GetInformationReply, error)
	// ListInformation ListInformation 获取咨询信息列表
	ListInformation(context.Context, *ListInformationRequest) (*ListInformationReply, error)
	// UpdateInformation UpdateInformation 更新咨询信息
	UpdateInformation(context.Context, *UpdateInformationRequest) (*UpdateInformationReply, error)
}

func RegisterInformationHTTPServer(s *http.Server, srv InformationHTTPServer) {
	r := s.Route("/")
	r.GET("/poverty/client/v1/information", _Information_GetInformation0_HTTP_Handler(srv))
	r.GET("/poverty/api/v1/information", _Information_GetInformation1_HTTP_Handler(srv))
	r.GET("/poverty/client/v1/informations", _Information_ListInformation0_HTTP_Handler(srv))
	r.GET("/poverty/api/v1/informations", _Information_ListInformation1_HTTP_Handler(srv))
	r.POST("/poverty/api/v1/information", _Information_CreateInformation0_HTTP_Handler(srv))
	r.PUT("/poverty/api/v1/information", _Information_UpdateInformation0_HTTP_Handler(srv))
	r.DELETE("/poverty/api/v1/information", _Information_DeleteInformation0_HTTP_Handler(srv))
}

func _Information_GetInformation0_HTTP_Handler(srv InformationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInformationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInformationGetInformation)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetInformation(ctx, req.(*GetInformationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInformationReply)
		return ctx.Result(200, reply)
	}
}

func _Information_GetInformation1_HTTP_Handler(srv InformationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInformationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInformationGetInformation)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetInformation(ctx, req.(*GetInformationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetInformationReply)
		return ctx.Result(200, reply)
	}
}

func _Information_ListInformation0_HTTP_Handler(srv InformationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInformationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInformationListInformation)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListInformation(ctx, req.(*ListInformationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInformationReply)
		return ctx.Result(200, reply)
	}
}

func _Information_ListInformation1_HTTP_Handler(srv InformationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInformationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInformationListInformation)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListInformation(ctx, req.(*ListInformationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInformationReply)
		return ctx.Result(200, reply)
	}
}

func _Information_CreateInformation0_HTTP_Handler(srv InformationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateInformationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInformationCreateInformation)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateInformation(ctx, req.(*CreateInformationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateInformationReply)
		return ctx.Result(200, reply)
	}
}

func _Information_UpdateInformation0_HTTP_Handler(srv InformationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateInformationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInformationUpdateInformation)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateInformation(ctx, req.(*UpdateInformationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateInformationReply)
		return ctx.Result(200, reply)
	}
}

func _Information_DeleteInformation0_HTTP_Handler(srv InformationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteInformationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInformationDeleteInformation)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteInformation(ctx, req.(*DeleteInformationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteInformationReply)
		return ctx.Result(200, reply)
	}
}

type InformationHTTPClient interface {
	CreateInformation(ctx context.Context, req *CreateInformationRequest, opts ...http.CallOption) (rsp *CreateInformationReply, err error)
	DeleteInformation(ctx context.Context, req *DeleteInformationRequest, opts ...http.CallOption) (rsp *DeleteInformationReply, err error)
	GetInformation(ctx context.Context, req *GetInformationRequest, opts ...http.CallOption) (rsp *GetInformationReply, err error)
	ListInformation(ctx context.Context, req *ListInformationRequest, opts ...http.CallOption) (rsp *ListInformationReply, err error)
	UpdateInformation(ctx context.Context, req *UpdateInformationRequest, opts ...http.CallOption) (rsp *UpdateInformationReply, err error)
}

type InformationHTTPClientImpl struct {
	cc *http.Client
}

func NewInformationHTTPClient(client *http.Client) InformationHTTPClient {
	return &InformationHTTPClientImpl{client}
}

func (c *InformationHTTPClientImpl) CreateInformation(ctx context.Context, in *CreateInformationRequest, opts ...http.CallOption) (*CreateInformationReply, error) {
	var out CreateInformationReply
	pattern := "/poverty/api/v1/information"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInformationCreateInformation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InformationHTTPClientImpl) DeleteInformation(ctx context.Context, in *DeleteInformationRequest, opts ...http.CallOption) (*DeleteInformationReply, error) {
	var out DeleteInformationReply
	pattern := "/poverty/api/v1/information"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInformationDeleteInformation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InformationHTTPClientImpl) GetInformation(ctx context.Context, in *GetInformationRequest, opts ...http.CallOption) (*GetInformationReply, error) {
	var out GetInformationReply
	pattern := "/poverty/api/v1/information"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInformationGetInformation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InformationHTTPClientImpl) ListInformation(ctx context.Context, in *ListInformationRequest, opts ...http.CallOption) (*ListInformationReply, error) {
	var out ListInformationReply
	pattern := "/poverty/api/v1/informations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInformationListInformation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InformationHTTPClientImpl) UpdateInformation(ctx context.Context, in *UpdateInformationRequest, opts ...http.CallOption) (*UpdateInformationReply, error) {
	var out UpdateInformationReply
	pattern := "/poverty/api/v1/information"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInformationUpdateInformation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
