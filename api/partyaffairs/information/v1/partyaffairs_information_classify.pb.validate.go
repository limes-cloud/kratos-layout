// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/partyaffairs/information/partyaffairs_information_classify.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListInformationClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInformationClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInformationClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListInformationClassifyRequestMultiError, or nil if none found.
func (m *ListInformationClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInformationClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListInformationClassifyRequestMultiError(errors)
	}

	return nil
}

// ListInformationClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by ListInformationClassifyRequest.ValidateAll()
// if the designated constraints aren't met.
type ListInformationClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInformationClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInformationClassifyRequestMultiError) AllErrors() []error { return m }

// ListInformationClassifyRequestValidationError is the validation error
// returned by ListInformationClassifyRequest.Validate if the designated
// constraints aren't met.
type ListInformationClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInformationClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInformationClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInformationClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInformationClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInformationClassifyRequestValidationError) ErrorName() string {
	return "ListInformationClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInformationClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInformationClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInformationClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInformationClassifyRequestValidationError{}

// Validate checks the field values on ListInformationClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInformationClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInformationClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInformationClassifyReplyMultiError, or nil if none found.
func (m *ListInformationClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInformationClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInformationClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInformationClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInformationClassifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInformationClassifyReplyMultiError(errors)
	}

	return nil
}

// ListInformationClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by ListInformationClassifyReply.ValidateAll() if
// the designated constraints aren't met.
type ListInformationClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInformationClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInformationClassifyReplyMultiError) AllErrors() []error { return m }

// ListInformationClassifyReplyValidationError is the validation error returned
// by ListInformationClassifyReply.Validate if the designated constraints
// aren't met.
type ListInformationClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInformationClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInformationClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInformationClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInformationClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInformationClassifyReplyValidationError) ErrorName() string {
	return "ListInformationClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInformationClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInformationClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInformationClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInformationClassifyReplyValidationError{}

// Validate checks the field values on CreateInformationClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateInformationClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInformationClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateInformationClassifyRequestMultiError, or nil if none found.
func (m *CreateInformationClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInformationClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateInformationClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Weight

	if len(errors) > 0 {
		return CreateInformationClassifyRequestMultiError(errors)
	}

	return nil
}

// CreateInformationClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateInformationClassifyRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInformationClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInformationClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInformationClassifyRequestMultiError) AllErrors() []error { return m }

// CreateInformationClassifyRequestValidationError is the validation error
// returned by CreateInformationClassifyRequest.Validate if the designated
// constraints aren't met.
type CreateInformationClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInformationClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInformationClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInformationClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInformationClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInformationClassifyRequestValidationError) ErrorName() string {
	return "CreateInformationClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInformationClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInformationClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInformationClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInformationClassifyRequestValidationError{}

// Validate checks the field values on CreateInformationClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInformationClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInformationClassifyReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateInformationClassifyReplyMultiError, or nil if none found.
func (m *CreateInformationClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInformationClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateInformationClassifyReplyMultiError(errors)
	}

	return nil
}

// CreateInformationClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by CreateInformationClassifyReply.ValidateAll()
// if the designated constraints aren't met.
type CreateInformationClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInformationClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInformationClassifyReplyMultiError) AllErrors() []error { return m }

// CreateInformationClassifyReplyValidationError is the validation error
// returned by CreateInformationClassifyReply.Validate if the designated
// constraints aren't met.
type CreateInformationClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInformationClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInformationClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInformationClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInformationClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInformationClassifyReplyValidationError) ErrorName() string {
	return "CreateInformationClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInformationClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInformationClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInformationClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInformationClassifyReplyValidationError{}

// Validate checks the field values on UpdateInformationClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateInformationClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInformationClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateInformationClassifyRequestMultiError, or nil if none found.
func (m *UpdateInformationClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInformationClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateInformationClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateInformationClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Weight

	if len(errors) > 0 {
		return UpdateInformationClassifyRequestMultiError(errors)
	}

	return nil
}

// UpdateInformationClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateInformationClassifyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateInformationClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInformationClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInformationClassifyRequestMultiError) AllErrors() []error { return m }

// UpdateInformationClassifyRequestValidationError is the validation error
// returned by UpdateInformationClassifyRequest.Validate if the designated
// constraints aren't met.
type UpdateInformationClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInformationClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInformationClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInformationClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInformationClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInformationClassifyRequestValidationError) ErrorName() string {
	return "UpdateInformationClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInformationClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInformationClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInformationClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInformationClassifyRequestValidationError{}

// Validate checks the field values on UpdateInformationClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInformationClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInformationClassifyReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateInformationClassifyReplyMultiError, or nil if none found.
func (m *UpdateInformationClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInformationClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInformationClassifyReplyMultiError(errors)
	}

	return nil
}

// UpdateInformationClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateInformationClassifyReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateInformationClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInformationClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInformationClassifyReplyMultiError) AllErrors() []error { return m }

// UpdateInformationClassifyReplyValidationError is the validation error
// returned by UpdateInformationClassifyReply.Validate if the designated
// constraints aren't met.
type UpdateInformationClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInformationClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInformationClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInformationClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInformationClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInformationClassifyReplyValidationError) ErrorName() string {
	return "UpdateInformationClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInformationClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInformationClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInformationClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInformationClassifyReplyValidationError{}

// Validate checks the field values on DeleteInformationClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteInformationClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInformationClassifyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteInformationClassifyRequestMultiError, or nil if none found.
func (m *DeleteInformationClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInformationClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteInformationClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInformationClassifyRequestMultiError(errors)
	}

	return nil
}

// DeleteInformationClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteInformationClassifyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInformationClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInformationClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInformationClassifyRequestMultiError) AllErrors() []error { return m }

// DeleteInformationClassifyRequestValidationError is the validation error
// returned by DeleteInformationClassifyRequest.Validate if the designated
// constraints aren't met.
type DeleteInformationClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInformationClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInformationClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInformationClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInformationClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInformationClassifyRequestValidationError) ErrorName() string {
	return "DeleteInformationClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInformationClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInformationClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInformationClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInformationClassifyRequestValidationError{}

// Validate checks the field values on DeleteInformationClassifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInformationClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInformationClassifyReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteInformationClassifyReplyMultiError, or nil if none found.
func (m *DeleteInformationClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInformationClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInformationClassifyReplyMultiError(errors)
	}

	return nil
}

// DeleteInformationClassifyReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteInformationClassifyReply.ValidateAll()
// if the designated constraints aren't met.
type DeleteInformationClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInformationClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInformationClassifyReplyMultiError) AllErrors() []error { return m }

// DeleteInformationClassifyReplyValidationError is the validation error
// returned by DeleteInformationClassifyReply.Validate if the designated
// constraints aren't met.
type DeleteInformationClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInformationClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInformationClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInformationClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInformationClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInformationClassifyReplyValidationError) ErrorName() string {
	return "DeleteInformationClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInformationClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInformationClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInformationClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInformationClassifyReplyValidationError{}

// Validate checks the field values on
// ListInformationClassifyReply_InformationClassify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListInformationClassifyReply_InformationClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInformationClassifyReply_InformationClassify with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListInformationClassifyReply_InformationClassifyMultiError, or nil if none found.
func (m *ListInformationClassifyReply_InformationClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInformationClassifyReply_InformationClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Weight

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ListInformationClassifyReply_InformationClassifyMultiError(errors)
	}

	return nil
}

// ListInformationClassifyReply_InformationClassifyMultiError is an error
// wrapping multiple validation errors returned by
// ListInformationClassifyReply_InformationClassify.ValidateAll() if the
// designated constraints aren't met.
type ListInformationClassifyReply_InformationClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInformationClassifyReply_InformationClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInformationClassifyReply_InformationClassifyMultiError) AllErrors() []error { return m }

// ListInformationClassifyReply_InformationClassifyValidationError is the
// validation error returned by
// ListInformationClassifyReply_InformationClassify.Validate if the designated
// constraints aren't met.
type ListInformationClassifyReply_InformationClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInformationClassifyReply_InformationClassifyValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListInformationClassifyReply_InformationClassifyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListInformationClassifyReply_InformationClassifyValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListInformationClassifyReply_InformationClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInformationClassifyReply_InformationClassifyValidationError) ErrorName() string {
	return "ListInformationClassifyReply_InformationClassifyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInformationClassifyReply_InformationClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInformationClassifyReply_InformationClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInformationClassifyReply_InformationClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInformationClassifyReply_InformationClassifyValidationError{}
