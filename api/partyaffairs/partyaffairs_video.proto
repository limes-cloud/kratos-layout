syntax = "proto3";

package partyaffairs.api.partyaffairs.v1;
option go_package = "./v1;v1";

import "validate/validate.proto";



message VideoClassify{
  message File {
    string name = 1;
    string sha = 2;
    string url = 3;
  }

  uint32 id = 1;
  string name = 2;
  string cover = 3;
  bool is_top = 4;
  bool is_task = 5;
  optional uint32 start = 6;
  optional uint32 end = 7;
  optional uint32 weight = 8;
  string desc = 9;
  uint32 created_at = 10;
  uint32 updated_at = 11;
  File resource = 12;

}

message PageVideoClassifyRequest{
  uint32 page = 1[(validate.rules).uint32 = {gt: 0}];
  uint32 page_size = 2[(validate.rules).uint32 = {gt: 0,lte:50}];
  optional string name = 3;
}

message PageVideoClassifyReply{
  uint32 total = 1;
  repeated VideoClassify list = 2;
}

message AddVideoClassifyRequest {
  string name = 1[(validate.rules).string = {min_len: 1}];
  string cover = 2[(validate.rules).string = {min_len: 1}];
  uint32 weight = 3[(validate.rules).uint32 = {gte: 0}];
  string desc = 4[(validate.rules).string = {min_len: 1}];
  bool is_top = 5;
  bool is_task = 6;
  optional uint32 start = 7;
  optional uint32 end = 8;
}

message UpdateVideoClassifyRequest {
  uint32 id = 1[(validate.rules).uint32 = {gt: 0}];
  string cover = 2[(validate.rules).string = {min_len: 1}];
  string name = 3[(validate.rules).string = {min_len: 1}];
  uint32 weight = 4[(validate.rules).uint32 = {gte: 0}];
  string desc = 5[(validate.rules).string = {min_len: 1}];
  bool is_top = 6;
  bool is_task = 7;
  optional uint32 start = 8;
  optional uint32 end = 9;
}

message DeleteVideoClassifyRequest{
  uint32 id = 1[(validate.rules).uint32 = {gt: 0}];
}

message VideoContent{
  message File {
    string name = 1;
    string sha = 2;
    string url = 3;
  }

  uint32 id = 1;
  string title = 2;
  string desc = 3;
  string url = 4;
  uint32 duration = 5;
  uint32 classify_id = 7;
  uint32 created_at = 8;
  uint32 updated_at = 9;
  optional VideoClassify classify = 10;
  File resource =  11;
  UserVideoProcess process = 12;
}

message GetVideoContentRequest{
  uint32 id = 1[(validate.rules).uint32 = {gt: 0}];
}

message PageVideoContentRequest{
  uint32 page = 1[(validate.rules).uint32 = {gt: 0}];
  uint32 page_size = 2[(validate.rules).uint32 = {gt: 0,lte:50}];
  optional uint32 classify_id = 3;
  optional string title = 4;
}

message PageVideoContentReply{
  uint32 total = 1;
  repeated VideoContent list = 2;
}

message AddVideoContentRequest {
  string title = 1[(validate.rules).string = {min_len: 1}];
  string desc = 2[(validate.rules).string = {min_len: 1}];
  string url = 3[(validate.rules).string = {min_len: 1}];
  uint32 classify_id = 4[(validate.rules).uint32 = {gt: 0}];
  uint32 duration = 5[(validate.rules).uint32 = {gt: 0}];
}

message UpdateVideoContentRequest {
  string title = 1[(validate.rules).string = {min_len: 1}];
  string desc = 2[(validate.rules).string = {min_len: 1}];
  string url = 3[(validate.rules).string = {min_len: 1}];
  uint32 classify_id = 4[(validate.rules).uint32 = {gt: 0}];
  uint32 id = 5[(validate.rules).uint32 = {gt: 0}];
  uint32 duration = 6[(validate.rules).uint32 = {gt: 0}];
}

message DeleteVideoContentRequest{
  uint32 id = 1[(validate.rules).uint32 = {gt: 0}];
}

message UpdateUserVideoProcessRequest{
  uint32 video_id = 1[(validate.rules).uint32 = {gt: 0}];
  uint32 time = 2[(validate.rules).uint32 = {gt: 0}];
}

message UserVideoProcess{
  uint32 video_id = 1;
  uint32 user_id = 2;
  bool finish = 3;
  uint32 time = 4;
  uint32 created_at = 5;
  uint32 updated_at = 6;
}