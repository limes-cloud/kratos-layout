// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/partyaffairs/partyaffairs_video.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VideoClassify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoClassify with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoClassifyMultiError, or
// nil if none found.
func (m *VideoClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Cover

	// no validation rules for IsTop

	// no validation rules for IsTask

	// no validation rules for Desc

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoClassifyValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoClassifyValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoClassifyValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Start != nil {
		// no validation rules for Start
	}

	if m.End != nil {
		// no validation rules for End
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if len(errors) > 0 {
		return VideoClassifyMultiError(errors)
	}

	return nil
}

// VideoClassifyMultiError is an error wrapping multiple validation errors
// returned by VideoClassify.ValidateAll() if the designated constraints
// aren't met.
type VideoClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoClassifyMultiError) AllErrors() []error { return m }

// VideoClassifyValidationError is the validation error returned by
// VideoClassify.Validate if the designated constraints aren't met.
type VideoClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoClassifyValidationError) ErrorName() string { return "VideoClassifyValidationError" }

// Error satisfies the builtin error interface
func (e VideoClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoClassifyValidationError{}

// Validate checks the field values on PageVideoClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageVideoClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageVideoClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageVideoClassifyRequestMultiError, or nil if none found.
func (m *PageVideoClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageVideoClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageVideoClassifyRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageVideoClassifyRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return PageVideoClassifyRequestMultiError(errors)
	}

	return nil
}

// PageVideoClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by PageVideoClassifyRequest.ValidateAll() if the designated
// constraints aren't met.
type PageVideoClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageVideoClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageVideoClassifyRequestMultiError) AllErrors() []error { return m }

// PageVideoClassifyRequestValidationError is the validation error returned by
// PageVideoClassifyRequest.Validate if the designated constraints aren't met.
type PageVideoClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageVideoClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageVideoClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageVideoClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageVideoClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageVideoClassifyRequestValidationError) ErrorName() string {
	return "PageVideoClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageVideoClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageVideoClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageVideoClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageVideoClassifyRequestValidationError{}

// Validate checks the field values on PageVideoClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageVideoClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageVideoClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageVideoClassifyReplyMultiError, or nil if none found.
func (m *PageVideoClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageVideoClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageVideoClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageVideoClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageVideoClassifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageVideoClassifyReplyMultiError(errors)
	}

	return nil
}

// PageVideoClassifyReplyMultiError is an error wrapping multiple validation
// errors returned by PageVideoClassifyReply.ValidateAll() if the designated
// constraints aren't met.
type PageVideoClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageVideoClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageVideoClassifyReplyMultiError) AllErrors() []error { return m }

// PageVideoClassifyReplyValidationError is the validation error returned by
// PageVideoClassifyReply.Validate if the designated constraints aren't met.
type PageVideoClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageVideoClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageVideoClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageVideoClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageVideoClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageVideoClassifyReplyValidationError) ErrorName() string {
	return "PageVideoClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageVideoClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageVideoClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageVideoClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageVideoClassifyReplyValidationError{}

// Validate checks the field values on AddVideoClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddVideoClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVideoClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddVideoClassifyRequestMultiError, or nil if none found.
func (m *AddVideoClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVideoClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddVideoClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := AddVideoClassifyRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := AddVideoClassifyRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := AddVideoClassifyRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsTop

	// no validation rules for IsTask

	if m.Start != nil {
		// no validation rules for Start
	}

	if m.End != nil {
		// no validation rules for End
	}

	if len(errors) > 0 {
		return AddVideoClassifyRequestMultiError(errors)
	}

	return nil
}

// AddVideoClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by AddVideoClassifyRequest.ValidateAll() if the designated
// constraints aren't met.
type AddVideoClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVideoClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVideoClassifyRequestMultiError) AllErrors() []error { return m }

// AddVideoClassifyRequestValidationError is the validation error returned by
// AddVideoClassifyRequest.Validate if the designated constraints aren't met.
type AddVideoClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVideoClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVideoClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVideoClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVideoClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVideoClassifyRequestValidationError) ErrorName() string {
	return "AddVideoClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddVideoClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVideoClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVideoClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVideoClassifyRequestValidationError{}

// Validate checks the field values on UpdateVideoClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVideoClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVideoClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVideoClassifyRequestMultiError, or nil if none found.
func (m *UpdateVideoClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVideoClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateVideoClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := UpdateVideoClassifyRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateVideoClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := UpdateVideoClassifyRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := UpdateVideoClassifyRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsTop

	// no validation rules for IsTask

	if m.Start != nil {
		// no validation rules for Start
	}

	if m.End != nil {
		// no validation rules for End
	}

	if len(errors) > 0 {
		return UpdateVideoClassifyRequestMultiError(errors)
	}

	return nil
}

// UpdateVideoClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateVideoClassifyRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateVideoClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVideoClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVideoClassifyRequestMultiError) AllErrors() []error { return m }

// UpdateVideoClassifyRequestValidationError is the validation error returned
// by UpdateVideoClassifyRequest.Validate if the designated constraints aren't met.
type UpdateVideoClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVideoClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVideoClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVideoClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVideoClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVideoClassifyRequestValidationError) ErrorName() string {
	return "UpdateVideoClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVideoClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVideoClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVideoClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVideoClassifyRequestValidationError{}

// Validate checks the field values on DeleteVideoClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteVideoClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVideoClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVideoClassifyRequestMultiError, or nil if none found.
func (m *DeleteVideoClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVideoClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteVideoClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteVideoClassifyRequestMultiError(errors)
	}

	return nil
}

// DeleteVideoClassifyRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteVideoClassifyRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteVideoClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVideoClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVideoClassifyRequestMultiError) AllErrors() []error { return m }

// DeleteVideoClassifyRequestValidationError is the validation error returned
// by DeleteVideoClassifyRequest.Validate if the designated constraints aren't met.
type DeleteVideoClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVideoClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVideoClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVideoClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVideoClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVideoClassifyRequestValidationError) ErrorName() string {
	return "DeleteVideoClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVideoClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVideoClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVideoClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVideoClassifyRequestValidationError{}

// Validate checks the field values on VideoContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoContentMultiError, or
// nil if none found.
func (m *VideoContent) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Url

	// no validation rules for Duration

	// no validation rules for ClassifyId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoContentValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoContentValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoContentValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoContentValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoContentValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoContentValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Classify != nil {

		if all {
			switch v := interface{}(m.GetClassify()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VideoContentValidationError{
						field:  "Classify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VideoContentValidationError{
						field:  "Classify",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetClassify()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VideoContentValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VideoContentMultiError(errors)
	}

	return nil
}

// VideoContentMultiError is an error wrapping multiple validation errors
// returned by VideoContent.ValidateAll() if the designated constraints aren't met.
type VideoContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoContentMultiError) AllErrors() []error { return m }

// VideoContentValidationError is the validation error returned by
// VideoContent.Validate if the designated constraints aren't met.
type VideoContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoContentValidationError) ErrorName() string { return "VideoContentValidationError" }

// Error satisfies the builtin error interface
func (e VideoContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoContentValidationError{}

// Validate checks the field values on GetVideoContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVideoContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoContentRequestMultiError, or nil if none found.
func (m *GetVideoContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetVideoContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetVideoContentRequestMultiError(errors)
	}

	return nil
}

// GetVideoContentRequestMultiError is an error wrapping multiple validation
// errors returned by GetVideoContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVideoContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoContentRequestMultiError) AllErrors() []error { return m }

// GetVideoContentRequestValidationError is the validation error returned by
// GetVideoContentRequest.Validate if the designated constraints aren't met.
type GetVideoContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoContentRequestValidationError) ErrorName() string {
	return "GetVideoContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideoContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoContentRequestValidationError{}

// Validate checks the field values on PageVideoContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageVideoContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageVideoContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageVideoContentRequestMultiError, or nil if none found.
func (m *PageVideoContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageVideoContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageVideoContentRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageVideoContentRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ClassifyId != nil {
		// no validation rules for ClassifyId
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if len(errors) > 0 {
		return PageVideoContentRequestMultiError(errors)
	}

	return nil
}

// PageVideoContentRequestMultiError is an error wrapping multiple validation
// errors returned by PageVideoContentRequest.ValidateAll() if the designated
// constraints aren't met.
type PageVideoContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageVideoContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageVideoContentRequestMultiError) AllErrors() []error { return m }

// PageVideoContentRequestValidationError is the validation error returned by
// PageVideoContentRequest.Validate if the designated constraints aren't met.
type PageVideoContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageVideoContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageVideoContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageVideoContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageVideoContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageVideoContentRequestValidationError) ErrorName() string {
	return "PageVideoContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageVideoContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageVideoContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageVideoContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageVideoContentRequestValidationError{}

// Validate checks the field values on PageVideoContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageVideoContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageVideoContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageVideoContentReplyMultiError, or nil if none found.
func (m *PageVideoContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageVideoContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageVideoContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageVideoContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageVideoContentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageVideoContentReplyMultiError(errors)
	}

	return nil
}

// PageVideoContentReplyMultiError is an error wrapping multiple validation
// errors returned by PageVideoContentReply.ValidateAll() if the designated
// constraints aren't met.
type PageVideoContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageVideoContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageVideoContentReplyMultiError) AllErrors() []error { return m }

// PageVideoContentReplyValidationError is the validation error returned by
// PageVideoContentReply.Validate if the designated constraints aren't met.
type PageVideoContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageVideoContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageVideoContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageVideoContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageVideoContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageVideoContentReplyValidationError) ErrorName() string {
	return "PageVideoContentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageVideoContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageVideoContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageVideoContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageVideoContentReplyValidationError{}

// Validate checks the field values on AddVideoContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddVideoContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddVideoContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddVideoContentRequestMultiError, or nil if none found.
func (m *AddVideoContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddVideoContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AddVideoContentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := AddVideoContentRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := AddVideoContentRequestValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := AddVideoContentRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() <= 0 {
		err := AddVideoContentRequestValidationError{
			field:  "Duration",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddVideoContentRequestMultiError(errors)
	}

	return nil
}

// AddVideoContentRequestMultiError is an error wrapping multiple validation
// errors returned by AddVideoContentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddVideoContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddVideoContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddVideoContentRequestMultiError) AllErrors() []error { return m }

// AddVideoContentRequestValidationError is the validation error returned by
// AddVideoContentRequest.Validate if the designated constraints aren't met.
type AddVideoContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddVideoContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddVideoContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddVideoContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddVideoContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddVideoContentRequestValidationError) ErrorName() string {
	return "AddVideoContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddVideoContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddVideoContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddVideoContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddVideoContentRequestValidationError{}

// Validate checks the field values on UpdateVideoContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVideoContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVideoContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVideoContentRequestMultiError, or nil if none found.
func (m *UpdateVideoContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVideoContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdateVideoContentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := UpdateVideoContentRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := UpdateVideoContentRequestValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := UpdateVideoContentRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := UpdateVideoContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() <= 0 {
		err := UpdateVideoContentRequestValidationError{
			field:  "Duration",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateVideoContentRequestMultiError(errors)
	}

	return nil
}

// UpdateVideoContentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVideoContentRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateVideoContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVideoContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVideoContentRequestMultiError) AllErrors() []error { return m }

// UpdateVideoContentRequestValidationError is the validation error returned by
// UpdateVideoContentRequest.Validate if the designated constraints aren't met.
type UpdateVideoContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVideoContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVideoContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVideoContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVideoContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVideoContentRequestValidationError) ErrorName() string {
	return "UpdateVideoContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVideoContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVideoContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVideoContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVideoContentRequestValidationError{}

// Validate checks the field values on DeleteVideoContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteVideoContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVideoContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVideoContentRequestMultiError, or nil if none found.
func (m *DeleteVideoContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVideoContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteVideoContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteVideoContentRequestMultiError(errors)
	}

	return nil
}

// DeleteVideoContentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteVideoContentRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteVideoContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVideoContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVideoContentRequestMultiError) AllErrors() []error { return m }

// DeleteVideoContentRequestValidationError is the validation error returned by
// DeleteVideoContentRequest.Validate if the designated constraints aren't met.
type DeleteVideoContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVideoContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVideoContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVideoContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVideoContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVideoContentRequestValidationError) ErrorName() string {
	return "DeleteVideoContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVideoContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVideoContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVideoContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVideoContentRequestValidationError{}

// Validate checks the field values on UpdateUserVideoProcessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserVideoProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserVideoProcessRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserVideoProcessRequestMultiError, or nil if none found.
func (m *UpdateUserVideoProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserVideoProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVideoId() <= 0 {
		err := UpdateUserVideoProcessRequestValidationError{
			field:  "VideoId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTime() <= 0 {
		err := UpdateUserVideoProcessRequestValidationError{
			field:  "Time",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserVideoProcessRequestMultiError(errors)
	}

	return nil
}

// UpdateUserVideoProcessRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserVideoProcessRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateUserVideoProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserVideoProcessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserVideoProcessRequestMultiError) AllErrors() []error { return m }

// UpdateUserVideoProcessRequestValidationError is the validation error
// returned by UpdateUserVideoProcessRequest.Validate if the designated
// constraints aren't met.
type UpdateUserVideoProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserVideoProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserVideoProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserVideoProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserVideoProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserVideoProcessRequestValidationError) ErrorName() string {
	return "UpdateUserVideoProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserVideoProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserVideoProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserVideoProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserVideoProcessRequestValidationError{}

// Validate checks the field values on UserVideoProcess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserVideoProcess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserVideoProcess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserVideoProcessMultiError, or nil if none found.
func (m *UserVideoProcess) ValidateAll() error {
	return m.validate(true)
}

func (m *UserVideoProcess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoId

	// no validation rules for UserId

	// no validation rules for Finish

	// no validation rules for Time

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UserVideoProcessMultiError(errors)
	}

	return nil
}

// UserVideoProcessMultiError is an error wrapping multiple validation errors
// returned by UserVideoProcess.ValidateAll() if the designated constraints
// aren't met.
type UserVideoProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserVideoProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserVideoProcessMultiError) AllErrors() []error { return m }

// UserVideoProcessValidationError is the validation error returned by
// UserVideoProcess.Validate if the designated constraints aren't met.
type UserVideoProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserVideoProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserVideoProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserVideoProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserVideoProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserVideoProcessValidationError) ErrorName() string { return "UserVideoProcessValidationError" }

// Error satisfies the builtin error interface
func (e UserVideoProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserVideoProcess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserVideoProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserVideoProcessValidationError{}

// Validate checks the field values on VideoClassify_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VideoClassify_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoClassify_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoClassify_FileMultiError, or nil if none found.
func (m *VideoClassify_File) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoClassify_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sha

	// no validation rules for Url

	if len(errors) > 0 {
		return VideoClassify_FileMultiError(errors)
	}

	return nil
}

// VideoClassify_FileMultiError is an error wrapping multiple validation errors
// returned by VideoClassify_File.ValidateAll() if the designated constraints
// aren't met.
type VideoClassify_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoClassify_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoClassify_FileMultiError) AllErrors() []error { return m }

// VideoClassify_FileValidationError is the validation error returned by
// VideoClassify_File.Validate if the designated constraints aren't met.
type VideoClassify_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoClassify_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoClassify_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoClassify_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoClassify_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoClassify_FileValidationError) ErrorName() string {
	return "VideoClassify_FileValidationError"
}

// Error satisfies the builtin error interface
func (e VideoClassify_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoClassify_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoClassify_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoClassify_FileValidationError{}

// Validate checks the field values on VideoContent_File with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VideoContent_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoContent_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VideoContent_FileMultiError, or nil if none found.
func (m *VideoContent_File) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoContent_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sha

	// no validation rules for Url

	if len(errors) > 0 {
		return VideoContent_FileMultiError(errors)
	}

	return nil
}

// VideoContent_FileMultiError is an error wrapping multiple validation errors
// returned by VideoContent_File.ValidateAll() if the designated constraints
// aren't met.
type VideoContent_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoContent_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoContent_FileMultiError) AllErrors() []error { return m }

// VideoContent_FileValidationError is the validation error returned by
// VideoContent_File.Validate if the designated constraints aren't met.
type VideoContent_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoContent_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoContent_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoContent_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoContent_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoContent_FileValidationError) ErrorName() string {
	return "VideoContent_FileValidationError"
}

// Error satisfies the builtin error interface
func (e VideoContent_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoContent_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoContent_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoContent_FileValidationError{}
