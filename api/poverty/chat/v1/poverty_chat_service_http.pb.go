// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/poverty/chat/poverty_chat_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChatDeleteChatRecord = "/poverty.api.poverty.chat.v1.Chat/DeleteChatRecord"
const OperationChatGetChatSetting = "/poverty.api.poverty.chat.v1.Chat/GetChatSetting"
const OperationChatListChatRecord = "/poverty.api.poverty.chat.v1.Chat/ListChatRecord"

type ChatHTTPServer interface {
	// DeleteChatRecord DeleteChatRecord 删除会话记录信息
	DeleteChatRecord(context.Context, *DeleteChatRecordRequest) (*DeleteChatRecordReply, error)
	// GetChatSetting GetChatSetting 获取chatbot setting
	GetChatSetting(context.Context, *GetChatSettingRequest) (*GetChatSettingReply, error)
	// ListChatRecord ListChatRecord 获取会话记录信息列表
	ListChatRecord(context.Context, *ListChatRecordRequest) (*ListChatRecordReply, error)
}

func RegisterChatHTTPServer(s *http.Server, srv ChatHTTPServer) {
	r := s.Route("/")
	r.GET("/poverty/client/v1/chat/setting", _Chat_GetChatSetting0_HTTP_Handler(srv))
	r.GET("/poverty/api/v1/chat/records", _Chat_ListChatRecord0_HTTP_Handler(srv))
	r.DELETE("/poverty/api/v1/chat/record", _Chat_DeleteChatRecord0_HTTP_Handler(srv))
}

func _Chat_GetChatSetting0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChatSettingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatGetChatSetting)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetChatSetting(ctx, req.(*GetChatSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetChatSettingReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_ListChatRecord0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListChatRecordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatListChatRecord)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListChatRecord(ctx, req.(*ListChatRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListChatRecordReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_DeleteChatRecord0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChatRecordRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatDeleteChatRecord)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteChatRecord(ctx, req.(*DeleteChatRecordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteChatRecordReply)
		return ctx.Result(200, reply)
	}
}

type ChatHTTPClient interface {
	DeleteChatRecord(ctx context.Context, req *DeleteChatRecordRequest, opts ...http.CallOption) (rsp *DeleteChatRecordReply, err error)
	GetChatSetting(ctx context.Context, req *GetChatSettingRequest, opts ...http.CallOption) (rsp *GetChatSettingReply, err error)
	ListChatRecord(ctx context.Context, req *ListChatRecordRequest, opts ...http.CallOption) (rsp *ListChatRecordReply, err error)
}

type ChatHTTPClientImpl struct {
	cc *http.Client
}

func NewChatHTTPClient(client *http.Client) ChatHTTPClient {
	return &ChatHTTPClientImpl{client}
}

func (c *ChatHTTPClientImpl) DeleteChatRecord(ctx context.Context, in *DeleteChatRecordRequest, opts ...http.CallOption) (*DeleteChatRecordReply, error) {
	var out DeleteChatRecordReply
	pattern := "/poverty/api/v1/chat/record"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatDeleteChatRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) GetChatSetting(ctx context.Context, in *GetChatSettingRequest, opts ...http.CallOption) (*GetChatSettingReply, error) {
	var out GetChatSettingReply
	pattern := "/poverty/client/v1/chat/setting"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatGetChatSetting))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) ListChatRecord(ctx context.Context, in *ListChatRecordRequest, opts ...http.CallOption) (*ListChatRecordReply, error) {
	var out ListChatRecordReply
	pattern := "/poverty/api/v1/chat/records"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatListChatRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
