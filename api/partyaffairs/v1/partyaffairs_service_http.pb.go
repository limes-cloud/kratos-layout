// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/partyaffairs/partyaffairs_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPartyAffairsAddBanner = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddBanner"
const OperationPartyAffairsAddNewsClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNewsClassify"
const OperationPartyAffairsAddNewsComment = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNewsComment"
const OperationPartyAffairsAddNewsContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNewsContent"
const OperationPartyAffairsAddNotice = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddNotice"
const OperationPartyAffairsAddResourceClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddResourceClassify"
const OperationPartyAffairsAddResourceContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddResourceContent"
const OperationPartyAffairsAddTask = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddTask"
const OperationPartyAffairsAddTaskValue = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddTaskValue"
const OperationPartyAffairsAddVideoClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddVideoClassify"
const OperationPartyAffairsAddVideoContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AddVideoContent"
const OperationPartyAffairsAllBanner = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AllBanner"
const OperationPartyAffairsAllNewsClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AllNewsClassify"
const OperationPartyAffairsAllResourceClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/AllResourceClassify"
const OperationPartyAffairsDeleteBanner = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteBanner"
const OperationPartyAffairsDeleteCurNewsComment = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteCurNewsComment"
const OperationPartyAffairsDeleteNewsClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNewsClassify"
const OperationPartyAffairsDeleteNewsComment = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNewsComment"
const OperationPartyAffairsDeleteNewsContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNewsContent"
const OperationPartyAffairsDeleteNotice = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteNotice"
const OperationPartyAffairsDeleteResourceClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteResourceClassify"
const OperationPartyAffairsDeleteResourceContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteResourceContent"
const OperationPartyAffairsDeleteTask = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteTask"
const OperationPartyAffairsDeleteTaskValue = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteTaskValue"
const OperationPartyAffairsDeleteVideoClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteVideoClassify"
const OperationPartyAffairsDeleteVideoContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/DeleteVideoContent"
const OperationPartyAffairsExportTaskValue = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/ExportTaskValue"
const OperationPartyAffairsGetCurTaskValue = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetCurTaskValue"
const OperationPartyAffairsGetNewsContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetNewsContent"
const OperationPartyAffairsGetNotice = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetNotice"
const OperationPartyAffairsGetResourceContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetResourceContent"
const OperationPartyAffairsGetTask = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetTask"
const OperationPartyAffairsGetTaskValue = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetTaskValue"
const OperationPartyAffairsGetVideoContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/GetVideoContent"
const OperationPartyAffairsPageNewsComment = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNewsComment"
const OperationPartyAffairsPageNewsContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNewsContent"
const OperationPartyAffairsPageNotice = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNotice"
const OperationPartyAffairsPageNoticeUser = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageNoticeUser"
const OperationPartyAffairsPageResourceContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageResourceContent"
const OperationPartyAffairsPageTask = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageTask"
const OperationPartyAffairsPageTaskValue = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageTaskValue"
const OperationPartyAffairsPageVideoClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageVideoClassify"
const OperationPartyAffairsPageVideoContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/PageVideoContent"
const OperationPartyAffairsReadNotice = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/ReadNotice"
const OperationPartyAffairsUpdateBanner = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateBanner"
const OperationPartyAffairsUpdateNewsClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateNewsClassify"
const OperationPartyAffairsUpdateNewsContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateNewsContent"
const OperationPartyAffairsUpdateNotice = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateNotice"
const OperationPartyAffairsUpdateResourceClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateResourceClassify"
const OperationPartyAffairsUpdateResourceContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateResourceContent"
const OperationPartyAffairsUpdateTask = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateTask"
const OperationPartyAffairsUpdateTaskValue = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateTaskValue"
const OperationPartyAffairsUpdateUserVideoProcess = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateUserVideoProcess"
const OperationPartyAffairsUpdateVideoClassify = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateVideoClassify"
const OperationPartyAffairsUpdateVideoContent = "/partyaffairs.api.partyaffairs.v1.PartyAffairs/UpdateVideoContent"

type PartyAffairsHTTPServer interface {
	AddBanner(context.Context, *AddBannerRequest) (*emptypb.Empty, error)
	AddNewsClassify(context.Context, *AddNewsClassifyRequest) (*emptypb.Empty, error)
	AddNewsComment(context.Context, *AddNewsCommentRequest) (*AddNewsCommentReply, error)
	AddNewsContent(context.Context, *AddNewsContentRequest) (*emptypb.Empty, error)
	AddNotice(context.Context, *AddNoticeRequest) (*emptypb.Empty, error)
	AddResourceClassify(context.Context, *AddResourceClassifyRequest) (*emptypb.Empty, error)
	AddResourceContent(context.Context, *AddResourceContentRequest) (*emptypb.Empty, error)
	AddTask(context.Context, *AddTaskRequest) (*emptypb.Empty, error)
	AddTaskValue(context.Context, *AddTaskValueRequest) (*emptypb.Empty, error)
	AddVideoClassify(context.Context, *AddVideoClassifyRequest) (*emptypb.Empty, error)
	AddVideoContent(context.Context, *AddVideoContentRequest) (*emptypb.Empty, error)
	AllBanner(context.Context, *emptypb.Empty) (*AllBannerReply, error)
	AllNewsClassify(context.Context, *emptypb.Empty) (*AllNewsClassifyReply, error)
	AllResourceClassify(context.Context, *emptypb.Empty) (*AllResourceClassifyReply, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*emptypb.Empty, error)
	DeleteCurNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error)
	DeleteNewsClassify(context.Context, *DeleteNewsClassifyRequest) (*emptypb.Empty, error)
	DeleteNewsComment(context.Context, *DeleteNewsCommentRequest) (*emptypb.Empty, error)
	DeleteNewsContent(context.Context, *DeleteNewsContentRequest) (*emptypb.Empty, error)
	DeleteNotice(context.Context, *DeleteNoticeRequest) (*emptypb.Empty, error)
	DeleteResourceClassify(context.Context, *DeleteResourceClassifyRequest) (*emptypb.Empty, error)
	DeleteResourceContent(context.Context, *DeleteResourceContentRequest) (*emptypb.Empty, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*emptypb.Empty, error)
	DeleteVideoClassify(context.Context, *DeleteVideoClassifyRequest) (*emptypb.Empty, error)
	DeleteVideoContent(context.Context, *DeleteVideoContentRequest) (*emptypb.Empty, error)
	ExportTaskValue(context.Context, *ExportTaskValueRequest) (*emptypb.Empty, error)
	GetCurTaskValue(context.Context, *GetCurTaskValueRequest) (*TaskValue, error)
	GetNewsContent(context.Context, *GetNewsContentRequest) (*NewsContent, error)
	GetNotice(context.Context, *GetNoticeRequest) (*Notice, error)
	GetResourceContent(context.Context, *GetResourceContentRequest) (*ResourceContent, error)
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	GetTaskValue(context.Context, *GetTaskValueRequest) (*TaskValue, error)
	GetVideoContent(context.Context, *GetVideoContentRequest) (*VideoContent, error)
	PageNewsComment(context.Context, *PageNewsCommentRequest) (*PageNewsCommentReply, error)
	PageNewsContent(context.Context, *PageNewsContentRequest) (*PageNewsContentReply, error)
	PageNotice(context.Context, *PageNoticeRequest) (*PageNoticeReply, error)
	PageNoticeUser(context.Context, *PageNoticeUserRequest) (*PageNoticeUserReply, error)
	PageResourceContent(context.Context, *PageResourceContentRequest) (*PageResourceContentReply, error)
	PageTask(context.Context, *PageTaskRequest) (*PageTaskReply, error)
	PageTaskValue(context.Context, *PageTaskValueRequest) (*PageTaskValueReply, error)
	PageVideoClassify(context.Context, *PageVideoClassifyRequest) (*PageVideoClassifyReply, error)
	PageVideoContent(context.Context, *PageVideoContentRequest) (*PageVideoContentReply, error)
	ReadNotice(context.Context, *ReadNoticeRequest) (*emptypb.Empty, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*emptypb.Empty, error)
	UpdateNewsClassify(context.Context, *UpdateNewsClassifyRequest) (*emptypb.Empty, error)
	UpdateNewsContent(context.Context, *UpdateNewsContentRequest) (*emptypb.Empty, error)
	UpdateNotice(context.Context, *UpdateNoticeRequest) (*emptypb.Empty, error)
	UpdateResourceClassify(context.Context, *UpdateResourceClassifyRequest) (*emptypb.Empty, error)
	UpdateResourceContent(context.Context, *UpdateResourceContentRequest) (*emptypb.Empty, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*emptypb.Empty, error)
	UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*emptypb.Empty, error)
	UpdateUserVideoProcess(context.Context, *UpdateUserVideoProcessRequest) (*emptypb.Empty, error)
	UpdateVideoClassify(context.Context, *UpdateVideoClassifyRequest) (*emptypb.Empty, error)
	UpdateVideoContent(context.Context, *UpdateVideoContentRequest) (*emptypb.Empty, error)
}

func RegisterPartyAffairsHTTPServer(s *http.Server, srv PartyAffairsHTTPServer) {
	r := s.Route("/")
	r.GET("/partyaffairs/api/v1/notice/users", _PartyAffairs_PageNoticeUser0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/notices", _PartyAffairs_PageNotice0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/notices", _PartyAffairs_PageNotice1_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/notice", _PartyAffairs_GetNotice0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/notice", _PartyAffairs_GetNotice1_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/notice/read", _PartyAffairs_ReadNotice0_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/notice", _PartyAffairs_AddNotice0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/notice", _PartyAffairs_UpdateNotice0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/notice", _PartyAffairs_DeleteNotice0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/news/classify", _PartyAffairs_AllNewsClassify0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/news/classify", _PartyAffairs_AllNewsClassify1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/news/classify", _PartyAffairs_AddNewsClassify0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/news/classify", _PartyAffairs_UpdateNewsClassify0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/news/classify", _PartyAffairs_DeleteNewsClassify0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/news/contents", _PartyAffairs_PageNewsContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/news/contents", _PartyAffairs_PageNewsContent1_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/news/content", _PartyAffairs_GetNewsContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/news/content", _PartyAffairs_GetNewsContent1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/news/content", _PartyAffairs_AddNewsContent0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/news/content", _PartyAffairs_UpdateNewsContent0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/news/content", _PartyAffairs_DeleteNewsContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/news/comments", _PartyAffairs_PageNewsComment0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/news/comment", _PartyAffairs_DeleteNewsComment0_HTTP_Handler(srv))
	r.POST("/partyaffairs/client/v1/news/comment", _PartyAffairs_AddNewsComment0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/client/v1/news/comment", _PartyAffairs_DeleteCurNewsComment0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/resource/classify", _PartyAffairs_AllResourceClassify0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/resource/classify", _PartyAffairs_AllResourceClassify1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/resource/classify", _PartyAffairs_AddResourceClassify0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/resource/classify", _PartyAffairs_UpdateResourceClassify0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/resource/classify", _PartyAffairs_DeleteResourceClassify0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/resource/contents", _PartyAffairs_PageResourceContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/resource/contents", _PartyAffairs_PageResourceContent1_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/resource/content", _PartyAffairs_GetResourceContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/resource/content", _PartyAffairs_GetResourceContent1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/resource/content", _PartyAffairs_AddResourceContent0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/resource/content", _PartyAffairs_UpdateResourceContent0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/resource/content", _PartyAffairs_DeleteResourceContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/banners", _PartyAffairs_AllBanner0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/banners", _PartyAffairs_AllBanner1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/banner", _PartyAffairs_AddBanner0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/banner", _PartyAffairs_UpdateBanner0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/banner", _PartyAffairs_DeleteBanner0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/tasks", _PartyAffairs_PageTask0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/tasks", _PartyAffairs_PageTask1_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/task", _PartyAffairs_GetTask0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/task", _PartyAffairs_GetTask1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/task", _PartyAffairs_AddTask0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/task", _PartyAffairs_UpdateTask0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/task", _PartyAffairs_DeleteTask0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/task/values", _PartyAffairs_PageTaskValue0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/task/value", _PartyAffairs_GetTaskValue0_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/task/values", _PartyAffairs_ExportTaskValue0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/task/value", _PartyAffairs_GetCurTaskValue0_HTTP_Handler(srv))
	r.POST("/partyaffairs/client/v1/task/value", _PartyAffairs_AddTaskValue0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/client/v1/task/value", _PartyAffairs_UpdateTaskValue0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/task/value", _PartyAffairs_DeleteTaskValue0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/video/classify", _PartyAffairs_PageVideoClassify0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/video/classify", _PartyAffairs_PageVideoClassify1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/video/classify", _PartyAffairs_AddVideoClassify0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/video/classify", _PartyAffairs_UpdateVideoClassify0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/video/classify", _PartyAffairs_DeleteVideoClassify0_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/video/contents", _PartyAffairs_PageVideoContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/video/contents", _PartyAffairs_PageVideoContent1_HTTP_Handler(srv))
	r.GET("/partyaffairs/client/v1/video/content", _PartyAffairs_GetVideoContent0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/video/content", _PartyAffairs_GetVideoContent1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/video/content", _PartyAffairs_AddVideoContent0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/video/content", _PartyAffairs_UpdateVideoContent0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/video/content", _PartyAffairs_DeleteVideoContent0_HTTP_Handler(srv))
	r.POST("/partyaffairs/client/v1/video/process", _PartyAffairs_UpdateUserVideoProcess0_HTTP_Handler(srv))
}

func _PartyAffairs_PageNoticeUser0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNoticeUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageNoticeUser)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNoticeUser(ctx, req.(*PageNoticeUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNoticeUserReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageNotice0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNotice(ctx, req.(*PageNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageNotice1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNotice(ctx, req.(*PageNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNoticeReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetNotice0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNotice(ctx, req.(*GetNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Notice)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetNotice1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNotice(ctx, req.(*GetNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Notice)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_ReadNotice0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsReadNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ReadNotice(ctx, req.(*ReadNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddNotice0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddNotice(ctx, req.(*AddNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateNotice0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNoticeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNotice(ctx, req.(*UpdateNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteNotice0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNoticeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteNotice)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNotice(ctx, req.(*DeleteNoticeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AllNewsClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAllNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllNewsClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllNewsClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AllNewsClassify1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAllNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllNewsClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllNewsClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddNewsClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddNewsClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddNewsClassify(ctx, req.(*AddNewsClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateNewsClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNewsClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNewsClassify(ctx, req.(*UpdateNewsClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteNewsClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNewsClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteNewsClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNewsClassify(ctx, req.(*DeleteNewsClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageNewsContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNewsContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNewsContent(ctx, req.(*PageNewsContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNewsContentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageNewsContent1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNewsContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNewsContent(ctx, req.(*PageNewsContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNewsContentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetNewsContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNewsContent(ctx, req.(*GetNewsContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NewsContent)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetNewsContent1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetNewsContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetNewsContent(ctx, req.(*GetNewsContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*NewsContent)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddNewsContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddNewsContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddNewsContent(ctx, req.(*AddNewsContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateNewsContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateNewsContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateNewsContent(ctx, req.(*UpdateNewsContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteNewsContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNewsContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteNewsContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNewsContent(ctx, req.(*DeleteNewsContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageNewsComment0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageNewsCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageNewsComment)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageNewsComment(ctx, req.(*PageNewsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageNewsCommentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteNewsComment0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNewsCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteNewsComment)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteNewsComment(ctx, req.(*DeleteNewsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddNewsComment0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddNewsCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddNewsComment)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddNewsComment(ctx, req.(*AddNewsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddNewsCommentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteCurNewsComment0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNewsCommentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteCurNewsComment)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteCurNewsComment(ctx, req.(*DeleteNewsCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AllResourceClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAllResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllResourceClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllResourceClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AllResourceClassify1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAllResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllResourceClassify(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllResourceClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddResourceClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddResourceClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddResourceClassify(ctx, req.(*AddResourceClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateResourceClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceClassify(ctx, req.(*UpdateResourceClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteResourceClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteResourceClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteResourceClassify(ctx, req.(*DeleteResourceClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageResourceContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageResourceContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageResourceContent(ctx, req.(*PageResourceContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageResourceContentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageResourceContent1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageResourceContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageResourceContent(ctx, req.(*PageResourceContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageResourceContentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetResourceContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResourceContent(ctx, req.(*GetResourceContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceContent)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetResourceContent1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResourceContent(ctx, req.(*GetResourceContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceContent)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddResourceContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddResourceContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddResourceContent(ctx, req.(*AddResourceContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateResourceContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceContent(ctx, req.(*UpdateResourceContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteResourceContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteResourceContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteResourceContent(ctx, req.(*DeleteResourceContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AllBanner0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAllBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllBanner(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllBannerReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AllBanner1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAllBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllBanner(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllBannerReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddBanner0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddBanner(ctx, req.(*AddBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateBanner0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBanner(ctx, req.(*UpdateBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteBanner0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteBanner(ctx, req.(*DeleteBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageTask0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageTask(ctx, req.(*PageTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageTaskReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageTask1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageTask(ctx, req.(*PageTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageTaskReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetTask0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTask(ctx, req.(*GetTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Task)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetTask1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTask(ctx, req.(*GetTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Task)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddTask0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddTask(ctx, req.(*AddTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateTask0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateTask(ctx, req.(*UpdateTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteTask0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteTask)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteTask(ctx, req.(*DeleteTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageTaskValue0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageTaskValue(ctx, req.(*PageTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageTaskValueReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetTaskValue0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTaskValue(ctx, req.(*GetTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskValue)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_ExportTaskValue0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExportTaskValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsExportTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ExportTaskValue(ctx, req.(*ExportTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetCurTaskValue0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCurTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetCurTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetCurTaskValue(ctx, req.(*GetCurTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskValue)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddTaskValue0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTaskValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddTaskValue(ctx, req.(*AddTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateTaskValue0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTaskValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateTaskValue(ctx, req.(*UpdateTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteTaskValue0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTaskValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteTaskValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteTaskValue(ctx, req.(*DeleteTaskValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageVideoClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageVideoClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageVideoClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageVideoClassify(ctx, req.(*PageVideoClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageVideoClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageVideoClassify1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageVideoClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageVideoClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageVideoClassify(ctx, req.(*PageVideoClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageVideoClassifyReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddVideoClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddVideoClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddVideoClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddVideoClassify(ctx, req.(*AddVideoClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateVideoClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVideoClassifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateVideoClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateVideoClassify(ctx, req.(*UpdateVideoClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteVideoClassify0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteVideoClassifyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteVideoClassify)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteVideoClassify(ctx, req.(*DeleteVideoClassifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageVideoContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageVideoContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageVideoContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageVideoContent(ctx, req.(*PageVideoContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageVideoContentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_PageVideoContent1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageVideoContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsPageVideoContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageVideoContent(ctx, req.(*PageVideoContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageVideoContentReply)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetVideoContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetVideoContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetVideoContent(ctx, req.(*GetVideoContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoContent)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_GetVideoContent1_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsGetVideoContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetVideoContent(ctx, req.(*GetVideoContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VideoContent)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_AddVideoContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddVideoContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsAddVideoContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddVideoContent(ctx, req.(*AddVideoContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateVideoContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateVideoContentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateVideoContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateVideoContent(ctx, req.(*UpdateVideoContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_DeleteVideoContent0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteVideoContentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsDeleteVideoContent)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteVideoContent(ctx, req.(*DeleteVideoContentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _PartyAffairs_UpdateUserVideoProcess0_HTTP_Handler(srv PartyAffairsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserVideoProcessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPartyAffairsUpdateUserVideoProcess)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateUserVideoProcess(ctx, req.(*UpdateUserVideoProcessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type PartyAffairsHTTPClient interface {
	AddBanner(ctx context.Context, req *AddBannerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddNewsClassify(ctx context.Context, req *AddNewsClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddNewsComment(ctx context.Context, req *AddNewsCommentRequest, opts ...http.CallOption) (rsp *AddNewsCommentReply, err error)
	AddNewsContent(ctx context.Context, req *AddNewsContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddNotice(ctx context.Context, req *AddNoticeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddResourceClassify(ctx context.Context, req *AddResourceClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddResourceContent(ctx context.Context, req *AddResourceContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddTask(ctx context.Context, req *AddTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddTaskValue(ctx context.Context, req *AddTaskValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddVideoClassify(ctx context.Context, req *AddVideoClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddVideoContent(ctx context.Context, req *AddVideoContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AllBanner(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllBannerReply, err error)
	AllNewsClassify(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllNewsClassifyReply, err error)
	AllResourceClassify(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllResourceClassifyReply, err error)
	DeleteBanner(ctx context.Context, req *DeleteBannerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteCurNewsComment(ctx context.Context, req *DeleteNewsCommentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteNewsClassify(ctx context.Context, req *DeleteNewsClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteNewsComment(ctx context.Context, req *DeleteNewsCommentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteNewsContent(ctx context.Context, req *DeleteNewsContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteNotice(ctx context.Context, req *DeleteNoticeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteResourceClassify(ctx context.Context, req *DeleteResourceClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteResourceContent(ctx context.Context, req *DeleteResourceContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTask(ctx context.Context, req *DeleteTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteTaskValue(ctx context.Context, req *DeleteTaskValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteVideoClassify(ctx context.Context, req *DeleteVideoClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteVideoContent(ctx context.Context, req *DeleteVideoContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ExportTaskValue(ctx context.Context, req *ExportTaskValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetCurTaskValue(ctx context.Context, req *GetCurTaskValueRequest, opts ...http.CallOption) (rsp *TaskValue, err error)
	GetNewsContent(ctx context.Context, req *GetNewsContentRequest, opts ...http.CallOption) (rsp *NewsContent, err error)
	GetNotice(ctx context.Context, req *GetNoticeRequest, opts ...http.CallOption) (rsp *Notice, err error)
	GetResourceContent(ctx context.Context, req *GetResourceContentRequest, opts ...http.CallOption) (rsp *ResourceContent, err error)
	GetTask(ctx context.Context, req *GetTaskRequest, opts ...http.CallOption) (rsp *Task, err error)
	GetTaskValue(ctx context.Context, req *GetTaskValueRequest, opts ...http.CallOption) (rsp *TaskValue, err error)
	GetVideoContent(ctx context.Context, req *GetVideoContentRequest, opts ...http.CallOption) (rsp *VideoContent, err error)
	PageNewsComment(ctx context.Context, req *PageNewsCommentRequest, opts ...http.CallOption) (rsp *PageNewsCommentReply, err error)
	PageNewsContent(ctx context.Context, req *PageNewsContentRequest, opts ...http.CallOption) (rsp *PageNewsContentReply, err error)
	PageNotice(ctx context.Context, req *PageNoticeRequest, opts ...http.CallOption) (rsp *PageNoticeReply, err error)
	PageNoticeUser(ctx context.Context, req *PageNoticeUserRequest, opts ...http.CallOption) (rsp *PageNoticeUserReply, err error)
	PageResourceContent(ctx context.Context, req *PageResourceContentRequest, opts ...http.CallOption) (rsp *PageResourceContentReply, err error)
	PageTask(ctx context.Context, req *PageTaskRequest, opts ...http.CallOption) (rsp *PageTaskReply, err error)
	PageTaskValue(ctx context.Context, req *PageTaskValueRequest, opts ...http.CallOption) (rsp *PageTaskValueReply, err error)
	PageVideoClassify(ctx context.Context, req *PageVideoClassifyRequest, opts ...http.CallOption) (rsp *PageVideoClassifyReply, err error)
	PageVideoContent(ctx context.Context, req *PageVideoContentRequest, opts ...http.CallOption) (rsp *PageVideoContentReply, err error)
	ReadNotice(ctx context.Context, req *ReadNoticeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateBanner(ctx context.Context, req *UpdateBannerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateNewsClassify(ctx context.Context, req *UpdateNewsClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateNewsContent(ctx context.Context, req *UpdateNewsContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateNotice(ctx context.Context, req *UpdateNoticeRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateResourceClassify(ctx context.Context, req *UpdateResourceClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateResourceContent(ctx context.Context, req *UpdateResourceContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateTask(ctx context.Context, req *UpdateTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateTaskValue(ctx context.Context, req *UpdateTaskValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateUserVideoProcess(ctx context.Context, req *UpdateUserVideoProcessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateVideoClassify(ctx context.Context, req *UpdateVideoClassifyRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateVideoContent(ctx context.Context, req *UpdateVideoContentRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type PartyAffairsHTTPClientImpl struct {
	cc *http.Client
}

func NewPartyAffairsHTTPClient(client *http.Client) PartyAffairsHTTPClient {
	return &PartyAffairsHTTPClientImpl{client}
}

func (c *PartyAffairsHTTPClientImpl) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/banner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddNewsClassify(ctx context.Context, in *AddNewsClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/news/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddNewsComment(ctx context.Context, in *AddNewsCommentRequest, opts ...http.CallOption) (*AddNewsCommentReply, error) {
	var out AddNewsCommentReply
	pattern := "/partyaffairs/client/v1/news/comment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddNewsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddNewsContent(ctx context.Context, in *AddNewsContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/news/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddNewsContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddNotice(ctx context.Context, in *AddNoticeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddResourceClassify(ctx context.Context, in *AddResourceClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddResourceContent(ctx context.Context, in *AddResourceContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/resource/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddTask(ctx context.Context, in *AddTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddTaskValue(ctx context.Context, in *AddTaskValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/client/v1/task/value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddVideoClassify(ctx context.Context, in *AddVideoClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/video/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddVideoClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AddVideoContent(ctx context.Context, in *AddVideoContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/video/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsAddVideoContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AllBanner(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllBannerReply, error) {
	var out AllBannerReply
	pattern := "/partyaffairs/api/v1/banners"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsAllBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AllNewsClassify(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllNewsClassifyReply, error) {
	var out AllNewsClassifyReply
	pattern := "/partyaffairs/api/v1/news/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsAllNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) AllResourceClassify(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllResourceClassifyReply, error) {
	var out AllResourceClassifyReply
	pattern := "/partyaffairs/api/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsAllResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/banner"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteCurNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/client/v1/news/comment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteCurNewsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteNewsClassify(ctx context.Context, in *DeleteNewsClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/news/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteNewsComment(ctx context.Context, in *DeleteNewsCommentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/news/comment"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteNewsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteNewsContent(ctx context.Context, in *DeleteNewsContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/news/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteNewsContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteNotice(ctx context.Context, in *DeleteNoticeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteResourceClassify(ctx context.Context, in *DeleteResourceClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteResourceContent(ctx context.Context, in *DeleteResourceContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/resource/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/task/value"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteVideoClassify(ctx context.Context, in *DeleteVideoClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/video/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteVideoClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) DeleteVideoContent(ctx context.Context, in *DeleteVideoContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/video/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsDeleteVideoContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) ExportTaskValue(ctx context.Context, in *ExportTaskValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/task/values"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsExportTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) GetCurTaskValue(ctx context.Context, in *GetCurTaskValueRequest, opts ...http.CallOption) (*TaskValue, error) {
	var out TaskValue
	pattern := "/partyaffairs/client/v1/task/value"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsGetCurTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) GetNewsContent(ctx context.Context, in *GetNewsContentRequest, opts ...http.CallOption) (*NewsContent, error) {
	var out NewsContent
	pattern := "/partyaffairs/api/v1/news/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsGetNewsContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) GetNotice(ctx context.Context, in *GetNoticeRequest, opts ...http.CallOption) (*Notice, error) {
	var out Notice
	pattern := "/partyaffairs/api/v1/notice"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsGetNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) GetResourceContent(ctx context.Context, in *GetResourceContentRequest, opts ...http.CallOption) (*ResourceContent, error) {
	var out ResourceContent
	pattern := "/partyaffairs/api/v1/resource/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsGetResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) GetTask(ctx context.Context, in *GetTaskRequest, opts ...http.CallOption) (*Task, error) {
	var out Task
	pattern := "/partyaffairs/api/v1/task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsGetTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...http.CallOption) (*TaskValue, error) {
	var out TaskValue
	pattern := "/partyaffairs/api/v1/task/value"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsGetTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) GetVideoContent(ctx context.Context, in *GetVideoContentRequest, opts ...http.CallOption) (*VideoContent, error) {
	var out VideoContent
	pattern := "/partyaffairs/api/v1/video/content"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsGetVideoContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageNewsComment(ctx context.Context, in *PageNewsCommentRequest, opts ...http.CallOption) (*PageNewsCommentReply, error) {
	var out PageNewsCommentReply
	pattern := "/partyaffairs/api/v1/news/comments"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageNewsComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageNewsContent(ctx context.Context, in *PageNewsContentRequest, opts ...http.CallOption) (*PageNewsContentReply, error) {
	var out PageNewsContentReply
	pattern := "/partyaffairs/api/v1/news/contents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageNewsContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageNotice(ctx context.Context, in *PageNoticeRequest, opts ...http.CallOption) (*PageNoticeReply, error) {
	var out PageNoticeReply
	pattern := "/partyaffairs/api/v1/notices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageNoticeUser(ctx context.Context, in *PageNoticeUserRequest, opts ...http.CallOption) (*PageNoticeUserReply, error) {
	var out PageNoticeUserReply
	pattern := "/partyaffairs/api/v1/notice/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageNoticeUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageResourceContent(ctx context.Context, in *PageResourceContentRequest, opts ...http.CallOption) (*PageResourceContentReply, error) {
	var out PageResourceContentReply
	pattern := "/partyaffairs/api/v1/resource/contents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageTask(ctx context.Context, in *PageTaskRequest, opts ...http.CallOption) (*PageTaskReply, error) {
	var out PageTaskReply
	pattern := "/partyaffairs/api/v1/tasks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageTaskValue(ctx context.Context, in *PageTaskValueRequest, opts ...http.CallOption) (*PageTaskValueReply, error) {
	var out PageTaskValueReply
	pattern := "/partyaffairs/api/v1/task/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageVideoClassify(ctx context.Context, in *PageVideoClassifyRequest, opts ...http.CallOption) (*PageVideoClassifyReply, error) {
	var out PageVideoClassifyReply
	pattern := "/partyaffairs/api/v1/video/classify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageVideoClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) PageVideoContent(ctx context.Context, in *PageVideoContentRequest, opts ...http.CallOption) (*PageVideoContentReply, error) {
	var out PageVideoContentReply
	pattern := "/partyaffairs/api/v1/video/contents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsPageVideoContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) ReadNotice(ctx context.Context, in *ReadNoticeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/client/v1/notice/read"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPartyAffairsReadNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/banner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateNewsClassify(ctx context.Context, in *UpdateNewsClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/news/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateNewsClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateNewsContent(ctx context.Context, in *UpdateNewsContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/news/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateNewsContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateNotice(ctx context.Context, in *UpdateNoticeRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/notice"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateNotice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateResourceClassify(ctx context.Context, in *UpdateResourceClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/resource/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateResourceClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateResourceContent(ctx context.Context, in *UpdateResourceContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/resource/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateResourceContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/client/v1/task/value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateTaskValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateUserVideoProcess(ctx context.Context, in *UpdateUserVideoProcessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/client/v1/video/process"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateUserVideoProcess))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateVideoClassify(ctx context.Context, in *UpdateVideoClassifyRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/video/classify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateVideoClassify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PartyAffairsHTTPClientImpl) UpdateVideoContent(ctx context.Context, in *UpdateVideoContentRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/partyaffairs/api/v1/video/content"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPartyAffairsUpdateVideoContent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
