// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/poverty/notice/poverty_notice.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetNoticeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoticeRequestMultiError, or nil if none found.
func (m *GetNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetNoticeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNoticeRequestMultiError(errors)
	}

	return nil
}

// GetNoticeRequestMultiError is an error wrapping multiple validation errors
// returned by GetNoticeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeRequestMultiError) AllErrors() []error { return m }

// GetNoticeRequestValidationError is the validation error returned by
// GetNoticeRequest.Validate if the designated constraints aren't met.
type GetNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeRequestValidationError) ErrorName() string { return "GetNoticeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeRequestValidationError{}

// Validate checks the field values on GetNoticeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNoticeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoticeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNoticeReplyMultiError,
// or nil if none found.
func (m *GetNoticeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoticeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Unit

	// no validation rules for Content

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return GetNoticeReplyMultiError(errors)
	}

	return nil
}

// GetNoticeReplyMultiError is an error wrapping multiple validation errors
// returned by GetNoticeReply.ValidateAll() if the designated constraints
// aren't met.
type GetNoticeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoticeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoticeReplyMultiError) AllErrors() []error { return m }

// GetNoticeReplyValidationError is the validation error returned by
// GetNoticeReply.Validate if the designated constraints aren't met.
type GetNoticeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoticeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoticeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoticeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoticeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoticeReplyValidationError) ErrorName() string { return "GetNoticeReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetNoticeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoticeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoticeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoticeReplyValidationError{}

// Validate checks the field values on ListNoticeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNoticeRequestMultiError, or nil if none found.
func (m *ListNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListNoticeRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListNoticeRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListNoticeRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListNoticeRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListNoticeRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListNoticeRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id is_top created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
			err := ListNoticeRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListNoticeRequestMultiError(errors)
	}

	return nil
}

// ListNoticeRequestMultiError is an error wrapping multiple validation errors
// returned by ListNoticeRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNoticeRequestMultiError) AllErrors() []error { return m }

// ListNoticeRequestValidationError is the validation error returned by
// ListNoticeRequest.Validate if the designated constraints aren't met.
type ListNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNoticeRequestValidationError) ErrorName() string {
	return "ListNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNoticeRequestValidationError{}

var _ListNoticeRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListNoticeRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"is_top":     {},
	"created_at": {},
	"updated_at": {},
}

// Validate checks the field values on ListNoticeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNoticeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNoticeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNoticeReplyMultiError, or nil if none found.
func (m *ListNoticeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNoticeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNoticeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNoticeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNoticeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNoticeReplyMultiError(errors)
	}

	return nil
}

// ListNoticeReplyMultiError is an error wrapping multiple validation errors
// returned by ListNoticeReply.ValidateAll() if the designated constraints
// aren't met.
type ListNoticeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNoticeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNoticeReplyMultiError) AllErrors() []error { return m }

// ListNoticeReplyValidationError is the validation error returned by
// ListNoticeReply.Validate if the designated constraints aren't met.
type ListNoticeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNoticeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNoticeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNoticeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNoticeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNoticeReplyValidationError) ErrorName() string { return "ListNoticeReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListNoticeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNoticeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNoticeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNoticeReplyValidationError{}

// Validate checks the field values on CreateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoticeRequestMultiError, or nil if none found.
func (m *CreateNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
		err := CreateNoticeRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateNoticeRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 1 {
		err := CreateNoticeRequestValidationError{
			field:  "Unit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Content

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return CreateNoticeRequestMultiError(errors)
	}

	return nil
}

// CreateNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoticeRequestMultiError) AllErrors() []error { return m }

// CreateNoticeRequestValidationError is the validation error returned by
// CreateNoticeRequest.Validate if the designated constraints aren't met.
type CreateNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoticeRequestValidationError) ErrorName() string {
	return "CreateNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoticeRequestValidationError{}

// Validate checks the field values on CreateNoticeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateNoticeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoticeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoticeReplyMultiError, or nil if none found.
func (m *CreateNoticeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoticeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNoticeReplyMultiError(errors)
	}

	return nil
}

// CreateNoticeReplyMultiError is an error wrapping multiple validation errors
// returned by CreateNoticeReply.ValidateAll() if the designated constraints
// aren't met.
type CreateNoticeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoticeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoticeReplyMultiError) AllErrors() []error { return m }

// CreateNoticeReplyValidationError is the validation error returned by
// CreateNoticeReply.Validate if the designated constraints aren't met.
type CreateNoticeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoticeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoticeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoticeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoticeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoticeReplyValidationError) ErrorName() string {
	return "CreateNoticeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoticeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoticeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoticeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoticeReplyValidationError{}

// Validate checks the field values on UpdateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoticeRequestMultiError, or nil if none found.
func (m *UpdateNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
			err := UpdateNoticeRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) < 1 {
			err := UpdateNoticeRequestValidationError{
				field:  "Description",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Unit != nil {

		if utf8.RuneCountInString(m.GetUnit()) < 1 {
			err := UpdateNoticeRequestValidationError{
				field:  "Unit",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Content != nil {
		// no validation rules for Content
	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateNoticeRequestMultiError(errors)
	}

	return nil
}

// UpdateNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoticeRequestMultiError) AllErrors() []error { return m }

// UpdateNoticeRequestValidationError is the validation error returned by
// UpdateNoticeRequest.Validate if the designated constraints aren't met.
type UpdateNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoticeRequestValidationError) ErrorName() string {
	return "UpdateNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoticeRequestValidationError{}

// Validate checks the field values on UpdateNoticeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoticeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoticeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoticeReplyMultiError, or nil if none found.
func (m *UpdateNoticeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoticeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNoticeReplyMultiError(errors)
	}

	return nil
}

// UpdateNoticeReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateNoticeReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateNoticeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoticeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoticeReplyMultiError) AllErrors() []error { return m }

// UpdateNoticeReplyValidationError is the validation error returned by
// UpdateNoticeReply.Validate if the designated constraints aren't met.
type UpdateNoticeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoticeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoticeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoticeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoticeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoticeReplyValidationError) ErrorName() string {
	return "UpdateNoticeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoticeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoticeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoticeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoticeReplyValidationError{}

// Validate checks the field values on DeleteNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoticeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoticeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoticeRequestMultiError, or nil if none found.
func (m *DeleteNoticeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoticeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteNoticeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNoticeRequestMultiError(errors)
	}

	return nil
}

// DeleteNoticeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNoticeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNoticeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoticeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoticeRequestMultiError) AllErrors() []error { return m }

// DeleteNoticeRequestValidationError is the validation error returned by
// DeleteNoticeRequest.Validate if the designated constraints aren't met.
type DeleteNoticeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoticeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoticeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoticeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoticeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoticeRequestValidationError) ErrorName() string {
	return "DeleteNoticeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoticeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoticeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoticeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoticeRequestValidationError{}

// Validate checks the field values on DeleteNoticeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoticeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoticeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoticeReplyMultiError, or nil if none found.
func (m *DeleteNoticeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoticeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNoticeReplyMultiError(errors)
	}

	return nil
}

// DeleteNoticeReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteNoticeReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteNoticeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoticeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoticeReplyMultiError) AllErrors() []error { return m }

// DeleteNoticeReplyValidationError is the validation error returned by
// DeleteNoticeReply.Validate if the designated constraints aren't met.
type DeleteNoticeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoticeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoticeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoticeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoticeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoticeReplyValidationError) ErrorName() string {
	return "DeleteNoticeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoticeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoticeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoticeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoticeReplyValidationError{}

// Validate checks the field values on ListNoticeReply_Notice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNoticeReply_Notice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNoticeReply_Notice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNoticeReply_NoticeMultiError, or nil if none found.
func (m *ListNoticeReply_Notice) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNoticeReply_Notice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Unit

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListNoticeReply_NoticeMultiError(errors)
	}

	return nil
}

// ListNoticeReply_NoticeMultiError is an error wrapping multiple validation
// errors returned by ListNoticeReply_Notice.ValidateAll() if the designated
// constraints aren't met.
type ListNoticeReply_NoticeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNoticeReply_NoticeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNoticeReply_NoticeMultiError) AllErrors() []error { return m }

// ListNoticeReply_NoticeValidationError is the validation error returned by
// ListNoticeReply_Notice.Validate if the designated constraints aren't met.
type ListNoticeReply_NoticeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNoticeReply_NoticeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNoticeReply_NoticeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNoticeReply_NoticeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNoticeReply_NoticeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNoticeReply_NoticeValidationError) ErrorName() string {
	return "ListNoticeReply_NoticeValidationError"
}

// Error satisfies the builtin error interface
func (e ListNoticeReply_NoticeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNoticeReply_Notice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNoticeReply_NoticeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNoticeReply_NoticeValidationError{}
