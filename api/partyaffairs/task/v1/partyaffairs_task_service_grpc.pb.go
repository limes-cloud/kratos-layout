// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/partyaffairs/task/partyaffairs_task_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Task_ListTask_FullMethodName             = "/partyaffairs.api.partyaffairs.task.v1.Task/ListTask"
	Task_ListCurNotFinishTask_FullMethodName = "/partyaffairs.api.partyaffairs.task.v1.Task/ListCurNotFinishTask"
	Task_GetTask_FullMethodName              = "/partyaffairs.api.partyaffairs.task.v1.Task/GetTask"
	Task_CreateTask_FullMethodName           = "/partyaffairs.api.partyaffairs.task.v1.Task/CreateTask"
	Task_UpdateTask_FullMethodName           = "/partyaffairs.api.partyaffairs.task.v1.Task/UpdateTask"
	Task_DeleteTask_FullMethodName           = "/partyaffairs.api.partyaffairs.task.v1.Task/DeleteTask"
	Task_ListTaskValue_FullMethodName        = "/partyaffairs.api.partyaffairs.task.v1.Task/ListTaskValue"
	Task_GetTaskValue_FullMethodName         = "/partyaffairs.api.partyaffairs.task.v1.Task/GetTaskValue"
	Task_ExportTaskValue_FullMethodName      = "/partyaffairs.api.partyaffairs.task.v1.Task/ExportTaskValue"
	Task_GetCurTaskValue_FullMethodName      = "/partyaffairs.api.partyaffairs.task.v1.Task/GetCurTaskValue"
	Task_CreateTaskValue_FullMethodName      = "/partyaffairs.api.partyaffairs.task.v1.Task/CreateTaskValue"
	Task_UpdateTaskValue_FullMethodName      = "/partyaffairs.api.partyaffairs.task.v1.Task/UpdateTaskValue"
	Task_DeleteTaskValue_FullMethodName      = "/partyaffairs.api.partyaffairs.task.v1.Task/DeleteTaskValue"
)

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskClient interface {
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskReply, error)
	ListCurNotFinishTask(ctx context.Context, in *ListCurNotFinishTaskRequest, opts ...grpc.CallOption) (*ListCurNotFinishTaskReply, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskReply, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskReply, error)
	ListTaskValue(ctx context.Context, in *ListTaskValueRequest, opts ...grpc.CallOption) (*ListTaskValueReply, error)
	GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*GetTaskValueReply, error)
	ExportTaskValue(ctx context.Context, in *ExportTaskValueRequest, opts ...grpc.CallOption) (*ExportTaskValueReply, error)
	GetCurTaskValue(ctx context.Context, in *GetCurTaskValueRequest, opts ...grpc.CallOption) (*GetCurTaskValueReply, error)
	CreateTaskValue(ctx context.Context, in *CreateTaskValueRequest, opts ...grpc.CallOption) (*CreateTaskValueReply, error)
	UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*UpdateTaskValueReply, error)
	DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*DeleteTaskValueReply, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskReply, error) {
	out := new(ListTaskReply)
	err := c.cc.Invoke(ctx, Task_ListTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ListCurNotFinishTask(ctx context.Context, in *ListCurNotFinishTaskRequest, opts ...grpc.CallOption) (*ListCurNotFinishTaskReply, error) {
	out := new(ListCurNotFinishTaskReply)
	err := c.cc.Invoke(ctx, Task_ListCurNotFinishTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskReply, error) {
	out := new(GetTaskReply)
	err := c.cc.Invoke(ctx, Task_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	out := new(CreateTaskReply)
	err := c.cc.Invoke(ctx, Task_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskReply, error) {
	out := new(UpdateTaskReply)
	err := c.cc.Invoke(ctx, Task_UpdateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskReply, error) {
	out := new(DeleteTaskReply)
	err := c.cc.Invoke(ctx, Task_DeleteTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ListTaskValue(ctx context.Context, in *ListTaskValueRequest, opts ...grpc.CallOption) (*ListTaskValueReply, error) {
	out := new(ListTaskValueReply)
	err := c.cc.Invoke(ctx, Task_ListTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskValue(ctx context.Context, in *GetTaskValueRequest, opts ...grpc.CallOption) (*GetTaskValueReply, error) {
	out := new(GetTaskValueReply)
	err := c.cc.Invoke(ctx, Task_GetTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ExportTaskValue(ctx context.Context, in *ExportTaskValueRequest, opts ...grpc.CallOption) (*ExportTaskValueReply, error) {
	out := new(ExportTaskValueReply)
	err := c.cc.Invoke(ctx, Task_ExportTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetCurTaskValue(ctx context.Context, in *GetCurTaskValueRequest, opts ...grpc.CallOption) (*GetCurTaskValueReply, error) {
	out := new(GetCurTaskValueReply)
	err := c.cc.Invoke(ctx, Task_GetCurTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateTaskValue(ctx context.Context, in *CreateTaskValueRequest, opts ...grpc.CallOption) (*CreateTaskValueReply, error) {
	out := new(CreateTaskValueReply)
	err := c.cc.Invoke(ctx, Task_CreateTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTaskValue(ctx context.Context, in *UpdateTaskValueRequest, opts ...grpc.CallOption) (*UpdateTaskValueReply, error) {
	out := new(UpdateTaskValueReply)
	err := c.cc.Invoke(ctx, Task_UpdateTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) DeleteTaskValue(ctx context.Context, in *DeleteTaskValueRequest, opts ...grpc.CallOption) (*DeleteTaskValueReply, error) {
	out := new(DeleteTaskValueReply)
	err := c.cc.Invoke(ctx, Task_DeleteTaskValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
// All implementations must embed UnimplementedTaskServer
// for forward compatibility
type TaskServer interface {
	ListTask(context.Context, *ListTaskRequest) (*ListTaskReply, error)
	ListCurNotFinishTask(context.Context, *ListCurNotFinishTaskRequest) (*ListCurNotFinishTaskReply, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskReply, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskReply, error)
	ListTaskValue(context.Context, *ListTaskValueRequest) (*ListTaskValueReply, error)
	GetTaskValue(context.Context, *GetTaskValueRequest) (*GetTaskValueReply, error)
	ExportTaskValue(context.Context, *ExportTaskValueRequest) (*ExportTaskValueReply, error)
	GetCurTaskValue(context.Context, *GetCurTaskValueRequest) (*GetCurTaskValueReply, error)
	CreateTaskValue(context.Context, *CreateTaskValueRequest) (*CreateTaskValueReply, error)
	UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*UpdateTaskValueReply, error)
	DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*DeleteTaskValueReply, error)
	mustEmbedUnimplementedTaskServer()
}

// UnimplementedTaskServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (UnimplementedTaskServer) ListTask(context.Context, *ListTaskRequest) (*ListTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedTaskServer) ListCurNotFinishTask(context.Context, *ListCurNotFinishTaskRequest) (*ListCurNotFinishTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurNotFinishTask not implemented")
}
func (UnimplementedTaskServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServer) ListTaskValue(context.Context, *ListTaskValueRequest) (*ListTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskValue not implemented")
}
func (UnimplementedTaskServer) GetTaskValue(context.Context, *GetTaskValueRequest) (*GetTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskValue not implemented")
}
func (UnimplementedTaskServer) ExportTaskValue(context.Context, *ExportTaskValueRequest) (*ExportTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTaskValue not implemented")
}
func (UnimplementedTaskServer) GetCurTaskValue(context.Context, *GetCurTaskValueRequest) (*GetCurTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurTaskValue not implemented")
}
func (UnimplementedTaskServer) CreateTaskValue(context.Context, *CreateTaskValueRequest) (*CreateTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskValue not implemented")
}
func (UnimplementedTaskServer) UpdateTaskValue(context.Context, *UpdateTaskValueRequest) (*UpdateTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskValue not implemented")
}
func (UnimplementedTaskServer) DeleteTaskValue(context.Context, *DeleteTaskValueRequest) (*DeleteTaskValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskValue not implemented")
}
func (UnimplementedTaskServer) mustEmbedUnimplementedTaskServer() {}

// UnsafeTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServer will
// result in compilation errors.
type UnsafeTaskServer interface {
	mustEmbedUnimplementedTaskServer()
}

func RegisterTaskServer(s grpc.ServiceRegistrar, srv TaskServer) {
	s.RegisterService(&Task_ServiceDesc, srv)
}

func _Task_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ListTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ListCurNotFinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurNotFinishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ListCurNotFinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ListCurNotFinishTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ListCurNotFinishTask(ctx, req.(*ListCurNotFinishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ListTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ListTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ListTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ListTaskValue(ctx, req.(*ListTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskValue(ctx, req.(*GetTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ExportTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ExportTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_ExportTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ExportTaskValue(ctx, req.(*ExportTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetCurTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetCurTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_GetCurTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetCurTaskValue(ctx, req.(*GetCurTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_CreateTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateTaskValue(ctx, req.(*CreateTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_UpdateTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTaskValue(ctx, req.(*UpdateTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_DeleteTaskValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).DeleteTaskValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Task_DeleteTaskValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).DeleteTaskValue(ctx, req.(*DeleteTaskValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Task_ServiceDesc is the grpc.ServiceDesc for Task service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Task_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partyaffairs.api.partyaffairs.task.v1.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTask",
			Handler:    _Task_ListTask_Handler,
		},
		{
			MethodName: "ListCurNotFinishTask",
			Handler:    _Task_ListCurNotFinishTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Task_GetTask_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Task_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Task_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Task_DeleteTask_Handler,
		},
		{
			MethodName: "ListTaskValue",
			Handler:    _Task_ListTaskValue_Handler,
		},
		{
			MethodName: "GetTaskValue",
			Handler:    _Task_GetTaskValue_Handler,
		},
		{
			MethodName: "ExportTaskValue",
			Handler:    _Task_ExportTaskValue_Handler,
		},
		{
			MethodName: "GetCurTaskValue",
			Handler:    _Task_GetCurTaskValue_Handler,
		},
		{
			MethodName: "CreateTaskValue",
			Handler:    _Task_CreateTaskValue_Handler,
		},
		{
			MethodName: "UpdateTaskValue",
			Handler:    _Task_UpdateTaskValue_Handler,
		},
		{
			MethodName: "DeleteTaskValue",
			Handler:    _Task_DeleteTaskValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/partyaffairs/task/partyaffairs_task_service.proto",
}
