// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/poverty/chat/poverty_chat_record.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendChatMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendChatMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendChatMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendChatMessageRequestMultiError, or nil if none found.
func (m *SendChatMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendChatMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 300 {
		err := SendChatMessageRequestValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 300 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SessionId != nil {
		// no validation rules for SessionId
	}

	if len(errors) > 0 {
		return SendChatMessageRequestMultiError(errors)
	}

	return nil
}

// SendChatMessageRequestMultiError is an error wrapping multiple validation
// errors returned by SendChatMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type SendChatMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendChatMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendChatMessageRequestMultiError) AllErrors() []error { return m }

// SendChatMessageRequestValidationError is the validation error returned by
// SendChatMessageRequest.Validate if the designated constraints aren't met.
type SendChatMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendChatMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendChatMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendChatMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendChatMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendChatMessageRequestValidationError) ErrorName() string {
	return "SendChatMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendChatMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendChatMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendChatMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendChatMessageRequestValidationError{}

// Validate checks the field values on SendChatMessageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendChatMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendChatMessageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendChatMessageReplyMultiError, or nil if none found.
func (m *SendChatMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendChatMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for SessionId

	if len(errors) > 0 {
		return SendChatMessageReplyMultiError(errors)
	}

	return nil
}

// SendChatMessageReplyMultiError is an error wrapping multiple validation
// errors returned by SendChatMessageReply.ValidateAll() if the designated
// constraints aren't met.
type SendChatMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendChatMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendChatMessageReplyMultiError) AllErrors() []error { return m }

// SendChatMessageReplyValidationError is the validation error returned by
// SendChatMessageReply.Validate if the designated constraints aren't met.
type SendChatMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendChatMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendChatMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendChatMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendChatMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendChatMessageReplyValidationError) ErrorName() string {
	return "SendChatMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendChatMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendChatMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendChatMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendChatMessageReplyValidationError{}

// Validate checks the field values on ListChatRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChatRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChatRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChatRecordRequestMultiError, or nil if none found.
func (m *ListChatRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChatRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListChatRecordRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListChatRecordRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListChatRecordRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListChatRecordRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListChatRecordRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListChatRecordRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id created_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.UserId != nil {

		if m.GetUserId() < 1 {
			err := ListChatRecordRequestValidationError{
				field:  "UserId",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.SessionId != nil {

		if l := utf8.RuneCountInString(m.GetSessionId()); l < 1 || l > 40 {
			err := ListChatRecordRequestValidationError{
				field:  "SessionId",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Distinct != nil {
		// no validation rules for Distinct
	}

	if m.UserName != nil {

		if utf8.RuneCountInString(m.GetUserName()) < 1 {
			err := ListChatRecordRequestValidationError{
				field:  "UserName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListChatRecordRequestMultiError(errors)
	}

	return nil
}

// ListChatRecordRequestMultiError is an error wrapping multiple validation
// errors returned by ListChatRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type ListChatRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChatRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChatRecordRequestMultiError) AllErrors() []error { return m }

// ListChatRecordRequestValidationError is the validation error returned by
// ListChatRecordRequest.Validate if the designated constraints aren't met.
type ListChatRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatRecordRequestValidationError) ErrorName() string {
	return "ListChatRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatRecordRequestValidationError{}

var _ListChatRecordRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListChatRecordRequest_OrderBy_InLookup = map[string]struct{}{
	"id":         {},
	"created_at": {},
}

// Validate checks the field values on ListChatRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChatRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChatRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChatRecordReplyMultiError, or nil if none found.
func (m *ListChatRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChatRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChatRecordReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChatRecordReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChatRecordReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChatRecordReplyMultiError(errors)
	}

	return nil
}

// ListChatRecordReplyMultiError is an error wrapping multiple validation
// errors returned by ListChatRecordReply.ValidateAll() if the designated
// constraints aren't met.
type ListChatRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChatRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChatRecordReplyMultiError) AllErrors() []error { return m }

// ListChatRecordReplyValidationError is the validation error returned by
// ListChatRecordReply.Validate if the designated constraints aren't met.
type ListChatRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatRecordReplyValidationError) ErrorName() string {
	return "ListChatRecordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatRecordReplyValidationError{}

// Validate checks the field values on DeleteChatRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChatRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChatRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChatRecordRequestMultiError, or nil if none found.
func (m *DeleteChatRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChatRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteChatRecordRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteChatRecordRequestMultiError(errors)
	}

	return nil
}

// DeleteChatRecordRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteChatRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteChatRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChatRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChatRecordRequestMultiError) AllErrors() []error { return m }

// DeleteChatRecordRequestValidationError is the validation error returned by
// DeleteChatRecordRequest.Validate if the designated constraints aren't met.
type DeleteChatRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChatRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChatRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChatRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChatRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChatRecordRequestValidationError) ErrorName() string {
	return "DeleteChatRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChatRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChatRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChatRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChatRecordRequestValidationError{}

// Validate checks the field values on DeleteChatRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChatRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChatRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChatRecordReplyMultiError, or nil if none found.
func (m *DeleteChatRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChatRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteChatRecordReplyMultiError(errors)
	}

	return nil
}

// DeleteChatRecordReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteChatRecordReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteChatRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChatRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChatRecordReplyMultiError) AllErrors() []error { return m }

// DeleteChatRecordReplyValidationError is the validation error returned by
// DeleteChatRecordReply.Validate if the designated constraints aren't met.
type DeleteChatRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChatRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChatRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChatRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChatRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChatRecordReplyValidationError) ErrorName() string {
	return "DeleteChatRecordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChatRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChatRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChatRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChatRecordReplyValidationError{}

// Validate checks the field values on ListChatRecordReply_ChatRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChatRecordReply_ChatRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChatRecordReply_ChatRecord with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListChatRecordReply_ChatRecordMultiError, or nil if none found.
func (m *ListChatRecordReply_ChatRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChatRecordReply_ChatRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for UserAvatar

	// no validation rules for SessionId

	// no validation rules for Message

	// no validation rules for Type

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ListChatRecordReply_ChatRecordMultiError(errors)
	}

	return nil
}

// ListChatRecordReply_ChatRecordMultiError is an error wrapping multiple
// validation errors returned by ListChatRecordReply_ChatRecord.ValidateAll()
// if the designated constraints aren't met.
type ListChatRecordReply_ChatRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChatRecordReply_ChatRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChatRecordReply_ChatRecordMultiError) AllErrors() []error { return m }

// ListChatRecordReply_ChatRecordValidationError is the validation error
// returned by ListChatRecordReply_ChatRecord.Validate if the designated
// constraints aren't met.
type ListChatRecordReply_ChatRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatRecordReply_ChatRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatRecordReply_ChatRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatRecordReply_ChatRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatRecordReply_ChatRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatRecordReply_ChatRecordValidationError) ErrorName() string {
	return "ListChatRecordReply_ChatRecordValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatRecordReply_ChatRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatRecordReply_ChatRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatRecordReply_ChatRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatRecordReply_ChatRecordValidationError{}
