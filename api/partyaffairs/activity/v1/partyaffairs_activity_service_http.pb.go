// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/partyaffairs/activity/partyaffairs_activity_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationActivityCreateActivity = "/partyaffairs.api.partyaffairs.activity.v1.Activity/CreateActivity"
const OperationActivityDeleteActivity = "/partyaffairs.api.partyaffairs.activity.v1.Activity/DeleteActivity"
const OperationActivityGetActivity = "/partyaffairs.api.partyaffairs.activity.v1.Activity/GetActivity"
const OperationActivityListActivity = "/partyaffairs.api.partyaffairs.activity.v1.Activity/ListActivity"
const OperationActivityUpdateActivity = "/partyaffairs.api.partyaffairs.activity.v1.Activity/UpdateActivity"

type ActivityHTTPServer interface {
	// CreateActivity CreateActivity 创建活动信息
	CreateActivity(context.Context, *CreateActivityRequest) (*CreateActivityReply, error)
	// DeleteActivity DeleteActivity 删除活动信息
	DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityReply, error)
	// GetActivity GetActivity 获取指定的活动信息
	GetActivity(context.Context, *GetActivityRequest) (*GetActivityReply, error)
	// ListActivity ListActivity 获取活动信息列表
	ListActivity(context.Context, *ListActivityRequest) (*ListActivityReply, error)
	// UpdateActivity UpdateActivity 更新活动信息
	UpdateActivity(context.Context, *UpdateActivityRequest) (*UpdateActivityReply, error)
}

func RegisterActivityHTTPServer(s *http.Server, srv ActivityHTTPServer) {
	r := s.Route("/")
	r.GET("/poverty/client/v1/activity", _Activity_GetActivity0_HTTP_Handler(srv))
	r.GET("/poverty/api/v1/activity", _Activity_GetActivity1_HTTP_Handler(srv))
	r.GET("/poverty/client/v1/activities", _Activity_ListActivity0_HTTP_Handler(srv))
	r.GET("/poverty/api/v1/activities", _Activity_ListActivity1_HTTP_Handler(srv))
	r.POST("/poverty/api/v1/activity", _Activity_CreateActivity0_HTTP_Handler(srv))
	r.PUT("/poverty/api/v1/activity", _Activity_UpdateActivity0_HTTP_Handler(srv))
	r.DELETE("/poverty/api/v1/activity", _Activity_DeleteActivity0_HTTP_Handler(srv))
}

func _Activity_GetActivity0_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityGetActivity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetActivity(ctx, req.(*GetActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetActivityReply)
		return ctx.Result(200, reply)
	}
}

func _Activity_GetActivity1_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityGetActivity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetActivity(ctx, req.(*GetActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetActivityReply)
		return ctx.Result(200, reply)
	}
}

func _Activity_ListActivity0_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityListActivity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListActivity(ctx, req.(*ListActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListActivityReply)
		return ctx.Result(200, reply)
	}
}

func _Activity_ListActivity1_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityListActivity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListActivity(ctx, req.(*ListActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListActivityReply)
		return ctx.Result(200, reply)
	}
}

func _Activity_CreateActivity0_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityCreateActivity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateActivity(ctx, req.(*CreateActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateActivityReply)
		return ctx.Result(200, reply)
	}
}

func _Activity_UpdateActivity0_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityUpdateActivity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateActivity(ctx, req.(*UpdateActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateActivityReply)
		return ctx.Result(200, reply)
	}
}

func _Activity_DeleteActivity0_HTTP_Handler(srv ActivityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityDeleteActivity)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteActivity(ctx, req.(*DeleteActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteActivityReply)
		return ctx.Result(200, reply)
	}
}

type ActivityHTTPClient interface {
	CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...http.CallOption) (rsp *CreateActivityReply, err error)
	DeleteActivity(ctx context.Context, req *DeleteActivityRequest, opts ...http.CallOption) (rsp *DeleteActivityReply, err error)
	GetActivity(ctx context.Context, req *GetActivityRequest, opts ...http.CallOption) (rsp *GetActivityReply, err error)
	ListActivity(ctx context.Context, req *ListActivityRequest, opts ...http.CallOption) (rsp *ListActivityReply, err error)
	UpdateActivity(ctx context.Context, req *UpdateActivityRequest, opts ...http.CallOption) (rsp *UpdateActivityReply, err error)
}

type ActivityHTTPClientImpl struct {
	cc *http.Client
}

func NewActivityHTTPClient(client *http.Client) ActivityHTTPClient {
	return &ActivityHTTPClientImpl{client}
}

func (c *ActivityHTTPClientImpl) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...http.CallOption) (*CreateActivityReply, error) {
	var out CreateActivityReply
	pattern := "/poverty/api/v1/activity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityCreateActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityHTTPClientImpl) DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...http.CallOption) (*DeleteActivityReply, error) {
	var out DeleteActivityReply
	pattern := "/poverty/api/v1/activity"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityDeleteActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityHTTPClientImpl) GetActivity(ctx context.Context, in *GetActivityRequest, opts ...http.CallOption) (*GetActivityReply, error) {
	var out GetActivityReply
	pattern := "/poverty/api/v1/activity"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityGetActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityHTTPClientImpl) ListActivity(ctx context.Context, in *ListActivityRequest, opts ...http.CallOption) (*ListActivityReply, error) {
	var out ListActivityReply
	pattern := "/poverty/api/v1/activities"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityListActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityHTTPClientImpl) UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...http.CallOption) (*UpdateActivityReply, error) {
	var out UpdateActivityReply
	pattern := "/poverty/api/v1/activity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityUpdateActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
