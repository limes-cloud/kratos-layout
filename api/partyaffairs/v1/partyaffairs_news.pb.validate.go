// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/partyaffairs/partyaffairs_news.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NewsComment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewsComment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewsComment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewsCommentMultiError, or
// nil if none found.
func (m *NewsComment) ValidateAll() error {
	return m.validate(true)
}

func (m *NewsComment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewsCommentValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewsCommentValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewsCommentValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	if m.Reply != nil {

		if all {
			switch v := interface{}(m.GetReply()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NewsCommentValidationError{
						field:  "Reply",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NewsCommentValidationError{
						field:  "Reply",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReply()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NewsCommentValidationError{
					field:  "Reply",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Text != nil {
		// no validation rules for Text
	}

	if len(errors) > 0 {
		return NewsCommentMultiError(errors)
	}

	return nil
}

// NewsCommentMultiError is an error wrapping multiple validation errors
// returned by NewsComment.ValidateAll() if the designated constraints aren't met.
type NewsCommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewsCommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewsCommentMultiError) AllErrors() []error { return m }

// NewsCommentValidationError is the validation error returned by
// NewsComment.Validate if the designated constraints aren't met.
type NewsCommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewsCommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewsCommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewsCommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewsCommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewsCommentValidationError) ErrorName() string { return "NewsCommentValidationError" }

// Error satisfies the builtin error interface
func (e NewsCommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewsComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewsCommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewsCommentValidationError{}

// Validate checks the field values on AddNewsCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNewsCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNewsCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNewsCommentRequestMultiError, or nil if none found.
func (m *AddNewsCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNewsCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetContentId() <= 0 {
		err := AddNewsCommentRequestValidationError{
			field:  "ContentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ReplyUid != nil {
		// no validation rules for ReplyUid
	}

	if m.Text != nil {
		// no validation rules for Text
	}

	if len(errors) > 0 {
		return AddNewsCommentRequestMultiError(errors)
	}

	return nil
}

// AddNewsCommentRequestMultiError is an error wrapping multiple validation
// errors returned by AddNewsCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddNewsCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNewsCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNewsCommentRequestMultiError) AllErrors() []error { return m }

// AddNewsCommentRequestValidationError is the validation error returned by
// AddNewsCommentRequest.Validate if the designated constraints aren't met.
type AddNewsCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNewsCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNewsCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNewsCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNewsCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNewsCommentRequestValidationError) ErrorName() string {
	return "AddNewsCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddNewsCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNewsCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNewsCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNewsCommentRequestValidationError{}

// Validate checks the field values on AddNewsCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNewsCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNewsCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNewsCommentReplyMultiError, or nil if none found.
func (m *AddNewsCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNewsCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddNewsCommentReplyMultiError(errors)
	}

	return nil
}

// AddNewsCommentReplyMultiError is an error wrapping multiple validation
// errors returned by AddNewsCommentReply.ValidateAll() if the designated
// constraints aren't met.
type AddNewsCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNewsCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNewsCommentReplyMultiError) AllErrors() []error { return m }

// AddNewsCommentReplyValidationError is the validation error returned by
// AddNewsCommentReply.Validate if the designated constraints aren't met.
type AddNewsCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNewsCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNewsCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNewsCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNewsCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNewsCommentReplyValidationError) ErrorName() string {
	return "AddNewsCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddNewsCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNewsCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNewsCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNewsCommentReplyValidationError{}

// Validate checks the field values on DeleteNewsCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNewsCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNewsCommentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNewsCommentRequestMultiError, or nil if none found.
func (m *DeleteNewsCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNewsCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteNewsCommentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNewsCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteNewsCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNewsCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNewsCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNewsCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNewsCommentRequestMultiError) AllErrors() []error { return m }

// DeleteNewsCommentRequestValidationError is the validation error returned by
// DeleteNewsCommentRequest.Validate if the designated constraints aren't met.
type DeleteNewsCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNewsCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNewsCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNewsCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNewsCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNewsCommentRequestValidationError) ErrorName() string {
	return "DeleteNewsCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNewsCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNewsCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNewsCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNewsCommentRequestValidationError{}

// Validate checks the field values on PageNewsCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageNewsCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageNewsCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageNewsCommentRequestMultiError, or nil if none found.
func (m *PageNewsCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageNewsCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageNewsCommentRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageNewsCommentRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetContentId() <= 0 {
		err := PageNewsCommentRequestValidationError{
			field:  "ContentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Text != nil {
		// no validation rules for Text
	}

	if len(errors) > 0 {
		return PageNewsCommentRequestMultiError(errors)
	}

	return nil
}

// PageNewsCommentRequestMultiError is an error wrapping multiple validation
// errors returned by PageNewsCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type PageNewsCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageNewsCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageNewsCommentRequestMultiError) AllErrors() []error { return m }

// PageNewsCommentRequestValidationError is the validation error returned by
// PageNewsCommentRequest.Validate if the designated constraints aren't met.
type PageNewsCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageNewsCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageNewsCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageNewsCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageNewsCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageNewsCommentRequestValidationError) ErrorName() string {
	return "PageNewsCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageNewsCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageNewsCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageNewsCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageNewsCommentRequestValidationError{}

// Validate checks the field values on PageNewsCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageNewsCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageNewsCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageNewsCommentReplyMultiError, or nil if none found.
func (m *PageNewsCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageNewsCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageNewsCommentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageNewsCommentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageNewsCommentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageNewsCommentReplyMultiError(errors)
	}

	return nil
}

// PageNewsCommentReplyMultiError is an error wrapping multiple validation
// errors returned by PageNewsCommentReply.ValidateAll() if the designated
// constraints aren't met.
type PageNewsCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageNewsCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageNewsCommentReplyMultiError) AllErrors() []error { return m }

// PageNewsCommentReplyValidationError is the validation error returned by
// PageNewsCommentReply.Validate if the designated constraints aren't met.
type PageNewsCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageNewsCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageNewsCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageNewsCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageNewsCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageNewsCommentReplyValidationError) ErrorName() string {
	return "PageNewsCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageNewsCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageNewsCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageNewsCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageNewsCommentReplyValidationError{}

// Validate checks the field values on NewsClassify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewsClassify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewsClassify with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewsClassifyMultiError, or
// nil if none found.
func (m *NewsClassify) ValidateAll() error {
	return m.validate(true)
}

func (m *NewsClassify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if len(errors) > 0 {
		return NewsClassifyMultiError(errors)
	}

	return nil
}

// NewsClassifyMultiError is an error wrapping multiple validation errors
// returned by NewsClassify.ValidateAll() if the designated constraints aren't met.
type NewsClassifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewsClassifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewsClassifyMultiError) AllErrors() []error { return m }

// NewsClassifyValidationError is the validation error returned by
// NewsClassify.Validate if the designated constraints aren't met.
type NewsClassifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewsClassifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewsClassifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewsClassifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewsClassifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewsClassifyValidationError) ErrorName() string { return "NewsClassifyValidationError" }

// Error satisfies the builtin error interface
func (e NewsClassifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewsClassify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewsClassifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewsClassifyValidationError{}

// Validate checks the field values on AllNewsClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllNewsClassifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllNewsClassifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllNewsClassifyReplyMultiError, or nil if none found.
func (m *AllNewsClassifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllNewsClassifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllNewsClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllNewsClassifyReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllNewsClassifyReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllNewsClassifyReplyMultiError(errors)
	}

	return nil
}

// AllNewsClassifyReplyMultiError is an error wrapping multiple validation
// errors returned by AllNewsClassifyReply.ValidateAll() if the designated
// constraints aren't met.
type AllNewsClassifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllNewsClassifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllNewsClassifyReplyMultiError) AllErrors() []error { return m }

// AllNewsClassifyReplyValidationError is the validation error returned by
// AllNewsClassifyReply.Validate if the designated constraints aren't met.
type AllNewsClassifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllNewsClassifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllNewsClassifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllNewsClassifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllNewsClassifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllNewsClassifyReplyValidationError) ErrorName() string {
	return "AllNewsClassifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllNewsClassifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllNewsClassifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllNewsClassifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllNewsClassifyReplyValidationError{}

// Validate checks the field values on AddNewsClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNewsClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNewsClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNewsClassifyRequestMultiError, or nil if none found.
func (m *AddNewsClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNewsClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddNewsClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := AddNewsClassifyRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddNewsClassifyRequestMultiError(errors)
	}

	return nil
}

// AddNewsClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by AddNewsClassifyRequest.ValidateAll() if the designated
// constraints aren't met.
type AddNewsClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNewsClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNewsClassifyRequestMultiError) AllErrors() []error { return m }

// AddNewsClassifyRequestValidationError is the validation error returned by
// AddNewsClassifyRequest.Validate if the designated constraints aren't met.
type AddNewsClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNewsClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNewsClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNewsClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNewsClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNewsClassifyRequestValidationError) ErrorName() string {
	return "AddNewsClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddNewsClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNewsClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNewsClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNewsClassifyRequestValidationError{}

// Validate checks the field values on UpdateNewsClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNewsClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNewsClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNewsClassifyRequestMultiError, or nil if none found.
func (m *UpdateNewsClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNewsClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateNewsClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateNewsClassifyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() < 0 {
		err := UpdateNewsClassifyRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateNewsClassifyRequestMultiError(errors)
	}

	return nil
}

// UpdateNewsClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNewsClassifyRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateNewsClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNewsClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNewsClassifyRequestMultiError) AllErrors() []error { return m }

// UpdateNewsClassifyRequestValidationError is the validation error returned by
// UpdateNewsClassifyRequest.Validate if the designated constraints aren't met.
type UpdateNewsClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNewsClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNewsClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNewsClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNewsClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNewsClassifyRequestValidationError) ErrorName() string {
	return "UpdateNewsClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNewsClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNewsClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNewsClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNewsClassifyRequestValidationError{}

// Validate checks the field values on DeleteNewsClassifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNewsClassifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNewsClassifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNewsClassifyRequestMultiError, or nil if none found.
func (m *DeleteNewsClassifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNewsClassifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteNewsClassifyRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNewsClassifyRequestMultiError(errors)
	}

	return nil
}

// DeleteNewsClassifyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNewsClassifyRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteNewsClassifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNewsClassifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNewsClassifyRequestMultiError) AllErrors() []error { return m }

// DeleteNewsClassifyRequestValidationError is the validation error returned by
// DeleteNewsClassifyRequest.Validate if the designated constraints aren't met.
type DeleteNewsClassifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNewsClassifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNewsClassifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNewsClassifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNewsClassifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNewsClassifyRequestValidationError) ErrorName() string {
	return "DeleteNewsClassifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNewsClassifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNewsClassifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNewsClassifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNewsClassifyRequestValidationError{}

// Validate checks the field values on NewsContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewsContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewsContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewsContentMultiError, or
// nil if none found.
func (m *NewsContent) ValidateAll() error {
	return m.validate(true)
}

func (m *NewsContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Unit

	// no validation rules for Cover

	// no validation rules for Desc

	// no validation rules for Read

	// no validation rules for IsTop

	// no validation rules for Content

	// no validation rules for ClassifyId

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetClassify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewsContentValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewsContentValidationError{
					field:  "Classify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewsContentValidationError{
				field:  "Classify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NewsContentValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NewsContentValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NewsContentValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NewsContentValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NewsContentValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NewsContentValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NewsContentMultiError(errors)
	}

	return nil
}

// NewsContentMultiError is an error wrapping multiple validation errors
// returned by NewsContent.ValidateAll() if the designated constraints aren't met.
type NewsContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewsContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewsContentMultiError) AllErrors() []error { return m }

// NewsContentValidationError is the validation error returned by
// NewsContent.Validate if the designated constraints aren't met.
type NewsContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewsContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewsContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewsContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewsContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewsContentValidationError) ErrorName() string { return "NewsContentValidationError" }

// Error satisfies the builtin error interface
func (e NewsContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewsContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewsContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewsContentValidationError{}

// Validate checks the field values on GetNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNewsContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNewsContentRequestMultiError, or nil if none found.
func (m *GetNewsContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNewsContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetNewsContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNewsContentRequestMultiError(errors)
	}

	return nil
}

// GetNewsContentRequestMultiError is an error wrapping multiple validation
// errors returned by GetNewsContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNewsContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNewsContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNewsContentRequestMultiError) AllErrors() []error { return m }

// GetNewsContentRequestValidationError is the validation error returned by
// GetNewsContentRequest.Validate if the designated constraints aren't met.
type GetNewsContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNewsContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNewsContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNewsContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNewsContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNewsContentRequestValidationError) ErrorName() string {
	return "GetNewsContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNewsContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNewsContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNewsContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNewsContentRequestValidationError{}

// Validate checks the field values on PageNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageNewsContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageNewsContentRequestMultiError, or nil if none found.
func (m *PageNewsContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageNewsContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageNewsContentRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageNewsContentRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ClassifyId != nil {
		// no validation rules for ClassifyId
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if len(errors) > 0 {
		return PageNewsContentRequestMultiError(errors)
	}

	return nil
}

// PageNewsContentRequestMultiError is an error wrapping multiple validation
// errors returned by PageNewsContentRequest.ValidateAll() if the designated
// constraints aren't met.
type PageNewsContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageNewsContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageNewsContentRequestMultiError) AllErrors() []error { return m }

// PageNewsContentRequestValidationError is the validation error returned by
// PageNewsContentRequest.Validate if the designated constraints aren't met.
type PageNewsContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageNewsContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageNewsContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageNewsContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageNewsContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageNewsContentRequestValidationError) ErrorName() string {
	return "PageNewsContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageNewsContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageNewsContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageNewsContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageNewsContentRequestValidationError{}

// Validate checks the field values on PageNewsContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageNewsContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageNewsContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageNewsContentReplyMultiError, or nil if none found.
func (m *PageNewsContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageNewsContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageNewsContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageNewsContentReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageNewsContentReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageNewsContentReplyMultiError(errors)
	}

	return nil
}

// PageNewsContentReplyMultiError is an error wrapping multiple validation
// errors returned by PageNewsContentReply.ValidateAll() if the designated
// constraints aren't met.
type PageNewsContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageNewsContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageNewsContentReplyMultiError) AllErrors() []error { return m }

// PageNewsContentReplyValidationError is the validation error returned by
// PageNewsContentReply.Validate if the designated constraints aren't met.
type PageNewsContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageNewsContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageNewsContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageNewsContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageNewsContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageNewsContentReplyValidationError) ErrorName() string {
	return "PageNewsContentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageNewsContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageNewsContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageNewsContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageNewsContentReplyValidationError{}

// Validate checks the field values on AddNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddNewsContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddNewsContentRequestMultiError, or nil if none found.
func (m *AddNewsContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddNewsContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AddNewsContentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 1 {
		err := AddNewsContentRequestValidationError{
			field:  "Unit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := AddNewsContentRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := AddNewsContentRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := AddNewsContentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := AddNewsContentRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if len(errors) > 0 {
		return AddNewsContentRequestMultiError(errors)
	}

	return nil
}

// AddNewsContentRequestMultiError is an error wrapping multiple validation
// errors returned by AddNewsContentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddNewsContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddNewsContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddNewsContentRequestMultiError) AllErrors() []error { return m }

// AddNewsContentRequestValidationError is the validation error returned by
// AddNewsContentRequest.Validate if the designated constraints aren't met.
type AddNewsContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNewsContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNewsContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNewsContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNewsContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNewsContentRequestValidationError) ErrorName() string {
	return "AddNewsContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddNewsContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNewsContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNewsContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNewsContentRequestValidationError{}

// Validate checks the field values on UpdateNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNewsContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNewsContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNewsContentRequestMultiError, or nil if none found.
func (m *UpdateNewsContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNewsContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdateNewsContentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnit()) < 1 {
		err := UpdateNewsContentRequestValidationError{
			field:  "Unit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCover()) < 1 {
		err := UpdateNewsContentRequestValidationError{
			field:  "Cover",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) < 1 {
		err := UpdateNewsContentRequestValidationError{
			field:  "Desc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := UpdateNewsContentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassifyId() <= 0 {
		err := UpdateNewsContentRequestValidationError{
			field:  "ClassifyId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := UpdateNewsContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.IsTop != nil {
		// no validation rules for IsTop
	}

	if len(errors) > 0 {
		return UpdateNewsContentRequestMultiError(errors)
	}

	return nil
}

// UpdateNewsContentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNewsContentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNewsContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNewsContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNewsContentRequestMultiError) AllErrors() []error { return m }

// UpdateNewsContentRequestValidationError is the validation error returned by
// UpdateNewsContentRequest.Validate if the designated constraints aren't met.
type UpdateNewsContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNewsContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNewsContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNewsContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNewsContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNewsContentRequestValidationError) ErrorName() string {
	return "UpdateNewsContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNewsContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNewsContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNewsContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNewsContentRequestValidationError{}

// Validate checks the field values on DeleteNewsContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNewsContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNewsContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNewsContentRequestMultiError, or nil if none found.
func (m *DeleteNewsContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNewsContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteNewsContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNewsContentRequestMultiError(errors)
	}

	return nil
}

// DeleteNewsContentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNewsContentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNewsContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNewsContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNewsContentRequestMultiError) AllErrors() []error { return m }

// DeleteNewsContentRequestValidationError is the validation error returned by
// DeleteNewsContentRequest.Validate if the designated constraints aren't met.
type DeleteNewsContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNewsContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNewsContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNewsContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNewsContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNewsContentRequestValidationError) ErrorName() string {
	return "DeleteNewsContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNewsContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNewsContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNewsContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNewsContentRequestValidationError{}

// Validate checks the field values on NewsComment_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NewsComment_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewsComment_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NewsComment_UserMultiError, or nil if none found.
func (m *NewsComment_User) ValidateAll() error {
	return m.validate(true)
}

func (m *NewsComment_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NickName

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.AvatarUrl != nil {
		// no validation rules for AvatarUrl
	}

	if m.Gender != nil {
		// no validation rules for Gender
	}

	if len(errors) > 0 {
		return NewsComment_UserMultiError(errors)
	}

	return nil
}

// NewsComment_UserMultiError is an error wrapping multiple validation errors
// returned by NewsComment_User.ValidateAll() if the designated constraints
// aren't met.
type NewsComment_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewsComment_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewsComment_UserMultiError) AllErrors() []error { return m }

// NewsComment_UserValidationError is the validation error returned by
// NewsComment_User.Validate if the designated constraints aren't met.
type NewsComment_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewsComment_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewsComment_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewsComment_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewsComment_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewsComment_UserValidationError) ErrorName() string { return "NewsComment_UserValidationError" }

// Error satisfies the builtin error interface
func (e NewsComment_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewsComment_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewsComment_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewsComment_UserValidationError{}

// Validate checks the field values on NewsContent_File with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NewsContent_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewsContent_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NewsContent_FileMultiError, or nil if none found.
func (m *NewsContent_File) ValidateAll() error {
	return m.validate(true)
}

func (m *NewsContent_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sha

	// no validation rules for Url

	if len(errors) > 0 {
		return NewsContent_FileMultiError(errors)
	}

	return nil
}

// NewsContent_FileMultiError is an error wrapping multiple validation errors
// returned by NewsContent_File.ValidateAll() if the designated constraints
// aren't met.
type NewsContent_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewsContent_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewsContent_FileMultiError) AllErrors() []error { return m }

// NewsContent_FileValidationError is the validation error returned by
// NewsContent_File.Validate if the designated constraints aren't met.
type NewsContent_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewsContent_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewsContent_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewsContent_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewsContent_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewsContent_FileValidationError) ErrorName() string { return "NewsContent_FileValidationError" }

// Error satisfies the builtin error interface
func (e NewsContent_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewsContent_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewsContent_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewsContent_FileValidationError{}
