// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/partyaffairs/banner/partyaffairs_banner.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListBannerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBannerRequestMultiError, or nil if none found.
func (m *ListBannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListBannerRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 50 {
		err := ListBannerRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Title != nil {

		if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
			err := ListBannerRequestValidationError{
				field:  "Title",
				reason: "value length must be between 1 and 40 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListBannerRequestMultiError(errors)
	}

	return nil
}

// ListBannerRequestMultiError is an error wrapping multiple validation errors
// returned by ListBannerRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBannerRequestMultiError) AllErrors() []error { return m }

// ListBannerRequestValidationError is the validation error returned by
// ListBannerRequest.Validate if the designated constraints aren't met.
type ListBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBannerRequestValidationError) ErrorName() string {
	return "ListBannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBannerRequestValidationError{}

// Validate checks the field values on ListBannerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBannerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBannerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBannerReplyMultiError, or nil if none found.
func (m *ListBannerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBannerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBannerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBannerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBannerReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBannerReplyMultiError(errors)
	}

	return nil
}

// ListBannerReplyMultiError is an error wrapping multiple validation errors
// returned by ListBannerReply.ValidateAll() if the designated constraints
// aren't met.
type ListBannerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBannerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBannerReplyMultiError) AllErrors() []error { return m }

// ListBannerReplyValidationError is the validation error returned by
// ListBannerReply.Validate if the designated constraints aren't met.
type ListBannerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBannerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBannerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBannerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBannerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBannerReplyValidationError) ErrorName() string { return "ListBannerReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListBannerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBannerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBannerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBannerReplyValidationError{}

// Validate checks the field values on CreateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBannerRequestMultiError, or nil if none found.
func (m *CreateBannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 40 {
		err := CreateBannerRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSrc()) < 1 {
		err := CreateBannerRequestValidationError{
			field:  "Src",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return CreateBannerRequestMultiError(errors)
	}

	return nil
}

// CreateBannerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBannerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBannerRequestMultiError) AllErrors() []error { return m }

// CreateBannerRequestValidationError is the validation error returned by
// CreateBannerRequest.Validate if the designated constraints aren't met.
type CreateBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBannerRequestValidationError) ErrorName() string {
	return "CreateBannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBannerRequestValidationError{}

// Validate checks the field values on CreateBannerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBannerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBannerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBannerReplyMultiError, or nil if none found.
func (m *CreateBannerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBannerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateBannerReplyMultiError(errors)
	}

	return nil
}

// CreateBannerReplyMultiError is an error wrapping multiple validation errors
// returned by CreateBannerReply.ValidateAll() if the designated constraints
// aren't met.
type CreateBannerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBannerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBannerReplyMultiError) AllErrors() []error { return m }

// CreateBannerReplyValidationError is the validation error returned by
// CreateBannerReply.Validate if the designated constraints aren't met.
type CreateBannerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBannerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBannerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBannerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBannerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBannerReplyValidationError) ErrorName() string {
	return "CreateBannerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBannerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBannerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBannerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBannerReplyValidationError{}

// Validate checks the field values on UpdateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBannerRequestMultiError, or nil if none found.
func (m *UpdateBannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Src

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateBannerRequestMultiError(errors)
	}

	return nil
}

// UpdateBannerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBannerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBannerRequestMultiError) AllErrors() []error { return m }

// UpdateBannerRequestValidationError is the validation error returned by
// UpdateBannerRequest.Validate if the designated constraints aren't met.
type UpdateBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBannerRequestValidationError) ErrorName() string {
	return "UpdateBannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBannerRequestValidationError{}

// Validate checks the field values on UpdateBannerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateBannerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBannerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBannerReplyMultiError, or nil if none found.
func (m *UpdateBannerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBannerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBannerReplyMultiError(errors)
	}

	return nil
}

// UpdateBannerReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateBannerReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateBannerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBannerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBannerReplyMultiError) AllErrors() []error { return m }

// UpdateBannerReplyValidationError is the validation error returned by
// UpdateBannerReply.Validate if the designated constraints aren't met.
type UpdateBannerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBannerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBannerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBannerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBannerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBannerReplyValidationError) ErrorName() string {
	return "UpdateBannerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBannerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBannerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBannerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBannerReplyValidationError{}

// Validate checks the field values on DeleteBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBannerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBannerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBannerRequestMultiError, or nil if none found.
func (m *DeleteBannerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBannerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteBannerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBannerRequestMultiError(errors)
	}

	return nil
}

// DeleteBannerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBannerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBannerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBannerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBannerRequestMultiError) AllErrors() []error { return m }

// DeleteBannerRequestValidationError is the validation error returned by
// DeleteBannerRequest.Validate if the designated constraints aren't met.
type DeleteBannerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBannerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBannerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBannerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBannerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBannerRequestValidationError) ErrorName() string {
	return "DeleteBannerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBannerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBannerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBannerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBannerRequestValidationError{}

// Validate checks the field values on DeleteBannerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBannerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBannerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBannerReplyMultiError, or nil if none found.
func (m *DeleteBannerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBannerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBannerReplyMultiError(errors)
	}

	return nil
}

// DeleteBannerReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteBannerReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteBannerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBannerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBannerReplyMultiError) AllErrors() []error { return m }

// DeleteBannerReplyValidationError is the validation error returned by
// DeleteBannerReply.Validate if the designated constraints aren't met.
type DeleteBannerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBannerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBannerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBannerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBannerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBannerReplyValidationError) ErrorName() string {
	return "DeleteBannerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBannerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBannerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBannerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBannerReplyValidationError{}

// Validate checks the field values on ListBannerReply_Banner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBannerReply_Banner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBannerReply_Banner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBannerReply_BannerMultiError, or nil if none found.
func (m *ListBannerReply_Banner) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBannerReply_Banner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Src

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Path != nil {
		// no validation rules for Path
	}

	if m.Weight != nil {
		// no validation rules for Weight
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListBannerReply_BannerMultiError(errors)
	}

	return nil
}

// ListBannerReply_BannerMultiError is an error wrapping multiple validation
// errors returned by ListBannerReply_Banner.ValidateAll() if the designated
// constraints aren't met.
type ListBannerReply_BannerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBannerReply_BannerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBannerReply_BannerMultiError) AllErrors() []error { return m }

// ListBannerReply_BannerValidationError is the validation error returned by
// ListBannerReply_Banner.Validate if the designated constraints aren't met.
type ListBannerReply_BannerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBannerReply_BannerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBannerReply_BannerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBannerReply_BannerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBannerReply_BannerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBannerReply_BannerValidationError) ErrorName() string {
	return "ListBannerReply_BannerValidationError"
}

// Error satisfies the builtin error interface
func (e ListBannerReply_BannerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBannerReply_Banner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBannerReply_BannerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBannerReply_BannerValidationError{}
