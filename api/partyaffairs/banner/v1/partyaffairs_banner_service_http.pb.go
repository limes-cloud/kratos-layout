// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/partyaffairs/banner/partyaffairs_banner_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBannerCreateBanner = "/partyaffairs.api.partyaffairs.banner.v1.Banner/CreateBanner"
const OperationBannerDeleteBanner = "/partyaffairs.api.partyaffairs.banner.v1.Banner/DeleteBanner"
const OperationBannerListBanner = "/partyaffairs.api.partyaffairs.banner.v1.Banner/ListBanner"
const OperationBannerUpdateBanner = "/partyaffairs.api.partyaffairs.banner.v1.Banner/UpdateBanner"

type BannerHTTPServer interface {
	// CreateBanner CreateBanner 创建轮播图信息
	CreateBanner(context.Context, *CreateBannerRequest) (*CreateBannerReply, error)
	// DeleteBanner DeleteBanner 删除轮播图信息
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerReply, error)
	// ListBanner ListBanner 获取轮播图信息列表
	ListBanner(context.Context, *ListBannerRequest) (*ListBannerReply, error)
	// UpdateBanner UpdateBanner 更新轮播图信息
	UpdateBanner(context.Context, *UpdateBannerRequest) (*UpdateBannerReply, error)
}

func RegisterBannerHTTPServer(s *http.Server, srv BannerHTTPServer) {
	r := s.Route("/")
	r.GET("/partyaffairs/client/v1/banners", _Banner_ListBanner0_HTTP_Handler(srv))
	r.GET("/partyaffairs/api/v1/banners", _Banner_ListBanner1_HTTP_Handler(srv))
	r.POST("/partyaffairs/api/v1/banner", _Banner_CreateBanner0_HTTP_Handler(srv))
	r.PUT("/partyaffairs/api/v1/banner", _Banner_UpdateBanner0_HTTP_Handler(srv))
	r.DELETE("/partyaffairs/api/v1/banner", _Banner_DeleteBanner0_HTTP_Handler(srv))
}

func _Banner_ListBanner0_HTTP_Handler(srv BannerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBannerListBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListBanner(ctx, req.(*ListBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBannerReply)
		return ctx.Result(200, reply)
	}
}

func _Banner_ListBanner1_HTTP_Handler(srv BannerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBannerListBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListBanner(ctx, req.(*ListBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBannerReply)
		return ctx.Result(200, reply)
	}
}

func _Banner_CreateBanner0_HTTP_Handler(srv BannerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBannerCreateBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateBanner(ctx, req.(*CreateBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBannerReply)
		return ctx.Result(200, reply)
	}
}

func _Banner_UpdateBanner0_HTTP_Handler(srv BannerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBannerUpdateBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBanner(ctx, req.(*UpdateBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBannerReply)
		return ctx.Result(200, reply)
	}
}

func _Banner_DeleteBanner0_HTTP_Handler(srv BannerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBannerDeleteBanner)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteBanner(ctx, req.(*DeleteBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBannerReply)
		return ctx.Result(200, reply)
	}
}

type BannerHTTPClient interface {
	CreateBanner(ctx context.Context, req *CreateBannerRequest, opts ...http.CallOption) (rsp *CreateBannerReply, err error)
	DeleteBanner(ctx context.Context, req *DeleteBannerRequest, opts ...http.CallOption) (rsp *DeleteBannerReply, err error)
	ListBanner(ctx context.Context, req *ListBannerRequest, opts ...http.CallOption) (rsp *ListBannerReply, err error)
	UpdateBanner(ctx context.Context, req *UpdateBannerRequest, opts ...http.CallOption) (rsp *UpdateBannerReply, err error)
}

type BannerHTTPClientImpl struct {
	cc *http.Client
}

func NewBannerHTTPClient(client *http.Client) BannerHTTPClient {
	return &BannerHTTPClientImpl{client}
}

func (c *BannerHTTPClientImpl) CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...http.CallOption) (*CreateBannerReply, error) {
	var out CreateBannerReply
	pattern := "/partyaffairs/api/v1/banner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBannerCreateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BannerHTTPClientImpl) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...http.CallOption) (*DeleteBannerReply, error) {
	var out DeleteBannerReply
	pattern := "/partyaffairs/api/v1/banner"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBannerDeleteBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BannerHTTPClientImpl) ListBanner(ctx context.Context, in *ListBannerRequest, opts ...http.CallOption) (*ListBannerReply, error) {
	var out ListBannerReply
	pattern := "/partyaffairs/api/v1/banners"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBannerListBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BannerHTTPClientImpl) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...http.CallOption) (*UpdateBannerReply, error) {
	var out UpdateBannerReply
	pattern := "/partyaffairs/api/v1/banner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBannerUpdateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
